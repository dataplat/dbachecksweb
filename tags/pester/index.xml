<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pester on dbachecks</title><link>https://dbachecks.io/tags/pester/</link><description>Recent content in Pester on dbachecks</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 19 Jan 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://dbachecks.io/tags/pester/index.xml" rel="self" type="application/rss+xml"/><item><title>Using Docker to run Integration Tests for dbachecks</title><link>https://dbachecks.io/blog/using-docker-to-run-integration-tests-for-dbachecks/</link><pubDate>Sat, 19 Jan 2019 00:00:00 +0000</pubDate><guid>https://dbachecks.io/blog/using-docker-to-run-integration-tests-for-dbachecks/</guid><description>&lt;p>My wonderful friend &lt;a class="link" href="https://twitter.com/AndreKamman" target="_blank" rel="noopener"
>André Kamman&lt;/a> wrote a fantastic blog post this week &lt;a class="link" href="https://andrekamman.com/sql-server-container-instances-via-cloudshell/" target="_blank" rel="noopener"
>SQL Server Container Instances via Cloudshell&lt;/a> about how he uses containers in Azure to test code against different versions of SQL Server.&lt;/p>
&lt;p>It reminded me that I do something very similar to test &lt;a class="link" href="http://dbachecks.io" target="_blank" rel="noopener"
>dbachecks&lt;/a> code changes. I thought this might make a good blog post. I will talk through how I do this locally as I merge a PR from another great friend &lt;a class="link" href="https://github.com/ClaudioESSilva" target="_blank" rel="noopener"
>Cláudio Silva&lt;/a> who has added &lt;a class="link" href="https://github.com/dataplat/dbachecks/pull/582" target="_blank" rel="noopener"
>agent job history checks.&lt;/a>&lt;/p>
&lt;h2 id="github-pr-vs-code-extension">GitHub PR VS Code Extension
&lt;/h2>&lt;p>I use the &lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=GitHub.vscode-pull-request-github" target="_blank" rel="noopener"
>GitHub Pull Requests extension for VS Code&lt;/a> to work with pull requests for &lt;a class="link" href="https://github.com/dataplat/dbachecks/pulls" target="_blank" rel="noopener"
>dbachecks&lt;/a>. This enables me to see all of the information about the Pull Request, merge it, review it, comment on it all from VS Code&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/01/GitHub-Pull-Request-VsCode-Extension.png"
loading="lazy"
>&lt;/p>
&lt;p>I can also see which files have been changed and which changes have been made&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/01/viewing-a-change.png"
loading="lazy"
>&lt;/p>
&lt;p>Once I am ready to test the pull request I perform a checkout using the extension&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/01/checkout-pull-request-checkout.png"
loading="lazy"
>&lt;/p>
&lt;p>This will update all of the files in my local repository with all of the changes in this pull request&lt;/p>
&lt;p>&lt;!-- raw HTML omitted -->&lt;!-- raw HTML omitted -->&lt;/p>
&lt;p>You can see at the bottom left that the branch changes from development to the name of the PR.&lt;a class="link" href="https://blog.robsewell.com/version-update-code-signing-and-publishing-to-the-powershell-gallery-with-vsts/" target="_blank" rel="noopener"
>&lt;/a>&lt;/p>
&lt;h2 id="running-the-unit-tests">Running The Unit Tests
&lt;/h2>&lt;p>The first thing that I do is to run the Unit Tests for the module. These will test that the code is following all of the guidelines that we require and that the tests are formatted in the correct way for the Power Bi to parse. I have blogged about this &lt;a class="link" href="https://blog.robsewell.com/using-the-ast-in-pester-for-dbachecks/" target="_blank" rel="noopener"
>here&lt;/a> and &lt;a class="link" href="https://blog.robsewell.com/using-the-powershell-ast-to-find-a-foreach-method/" target="_blank" rel="noopener"
>here&lt;/a> and we use this Pester in our CI process in Azure DevOps which I described &lt;a class="link" href="https://blog.robsewell.com/version-update-code-signing-and-publishing-to-the-powershell-gallery-with-vsts/" target="_blank" rel="noopener"
>here.&lt;/a>&lt;/p>
&lt;p>I navigate to the root of the dbachecks repository on my local machine and run&lt;/p>
&lt;pre>&lt;code> $testresults = Invoke-Pester .\tests -ExcludeTag Integration -Show Fails -PassThru
&lt;/code>&lt;/pre>
&lt;p>and after about a minute&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/01/pester-tests.png"
loading="lazy"
>&lt;/p>
&lt;p>Thank you Cláudio, the code has passed the tests 😉&lt;/p>
&lt;h2 id="running-some-integration-tests">Running Some Integration Tests
&lt;/h2>&lt;p>The difference between Unit tests and Integration tests in a nutshell is that the Unit tests are testing that the code is doing what is expected without any other external influences whilst the Integration tests are checking that the code is doing what is expected when running on an actual environment. In this scenario we know that the code is doing what is expected but we want to check what it does when it runs against a SQL Server and even when it runs against multiple SQL Servers of different versions.&lt;/p>
&lt;h2 id="multiple-versions-of-sql-server">Multiple Versions of SQL Server
&lt;/h2>&lt;p>As I have described &lt;a class="link" href="https://blog.robsewell.com/creating-sql-server-containers-for-versions-2012-2017/" target="_blank" rel="noopener"
>before&lt;/a> my friend and former colleague Andrew Pruski &lt;a class="link" href="http://dbafromthecold.com" target="_blank" rel="noopener"
>b&lt;/a> | &lt;a class="link" href="http://twitter.com/dbafromthecold" target="_blank" rel="noopener"
>t&lt;/a> has many resources for running SQL in containers. This means that I can quickly and easily create fresh uncontaminated instances of SQL 2012, 2014, 2016 and 2017 really quickly.&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/01/creating-contatiners.png"
loading="lazy"
>&lt;/p>
&lt;p>I can create 4 instances of different versions of SQL in (a tad over) 1 minute. How about you?&lt;/p>
&lt;p>Imagine how long it would take to run the installers for 4 versions of SQL and the pain you would have trying to uninstall them and make sure everything is ‘clean’. Even images that have been sysprep’d won’t be done in 1 minute.&lt;/p>
&lt;h2 id="docker-compose-up-">Docker Compose Up ?
&lt;/h2>&lt;p>So what is this magic command that has enabled me to do this? docker compose uses a YAML file to define multi-container applications. This means that with a file called docker-compose.yml like &lt;a class="link" href="https://gist.github.com/SQLDBAWithABeard/b589d499484af4ebfb7d637cb6b4efa3" target="_blank" rel="noopener"
>this&lt;/a>&lt;/p>
&lt;pre>&lt;code>version: '3.7'
services:
sql2012:
image: dbafromthecold/sqlserver2012dev:sp4
ports:
- &amp;quot;15589:1433&amp;quot;
environment:
SA_PASSWORD: &amp;quot;Password0!&amp;quot;
ACCEPT_EULA: &amp;quot;Y&amp;quot;
sql2014:
image: dbafromthecold/sqlserver2014dev:sp2
ports:
- &amp;quot;15588:1433&amp;quot;
environment:
SA_PASSWORD: &amp;quot;Password0!&amp;quot;
ACCEPT_EULA: &amp;quot;Y&amp;quot;
sql2016:
image: dbafromthecold/sqlserver2016dev:sp2
ports:
- &amp;quot;15587:1433&amp;quot;
environment:
SA_PASSWORD: &amp;quot;Password0!&amp;quot;
ACCEPT_EULA: &amp;quot;Y&amp;quot;
sql2017:
image: microsoft/ mssql-server-windows-developer:2017-latest
ports:
- &amp;quot;15586:1433&amp;quot;
environment:
SA_PASSWORD: &amp;quot;Password0!&amp;quot;
ACCEPT_EULA: &amp;quot;Y&amp;quot;
&lt;/code>&lt;/pre>
&lt;p>and in that directory just run&lt;/p>
&lt;pre>&lt;code>docker-compose up -d
&lt;/code>&lt;/pre>
&lt;p>and 4 SQL containers are available to you. You can interact with them via SSMS if you wish with localhost comma PORTNUMBER. The port numbers in the above file are 15586, 15587,15588 and 15589&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/01/containers.png?resize=630%2C188&amp;amp;ssl=1"
loading="lazy"
>](&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2019/01/containers.png?ssl=1" target="_blank" rel="noopener"
>https://blog.robsewell.com/assets/uploads/2019/01/containers.png?ssl=1&lt;/a>)&lt;/p>
&lt;p>Now it must be noted, as I &lt;a class="link" href="https://blog.robsewell.com/creating-sql-server-containers-for-versions-2012-2017/" target="_blank" rel="noopener"
>describe here&lt;/a> that first I pulled the images to my laptop. The first time you run docker compose will take significantly longer if you haven’t pulled the images already (pulling the images will take quite a while depending on your broadband speed)&lt;/p>
&lt;h2 id="credential">Credential
&lt;/h2>&lt;p>The next thing is to save a credential to make it easier to automate.&lt;del>I use the method described by my PowerShell friend Jaap Brasser &lt;a class="link" href="https://www.jaapbrasser.com/quickly-and-securely-storing-your-credentials-powershell/" target="_blank" rel="noopener"
>here&lt;/a>.&lt;/del>&lt;/p>
&lt;p>EDIT (September or is it March? 2020) - Nowadays I use the Secret Management Module&lt;/p>
&lt;p>I run this code&lt;/p>
&lt;pre>&lt;code> $CredentialPath = 'C:\MSSQL\BACKUP\KEEP\sacred.xml'
Get-Credential | Export-Clixml -Path $CredentialPath
&lt;/code>&lt;/pre>
&lt;p>and then I can create a credential object using&lt;/p>
&lt;pre>&lt;code>$cred = Import-Clixml $CredentialPath
&lt;/code>&lt;/pre>
&lt;h2 id="check-the-connections">Check The Connections
&lt;/h2>&lt;p>I ensure a clean session by removing the dbatools and dbachecks modules and then import the local version of dbachecks and set some variables&lt;/p>
&lt;pre>&lt;code>$dbacheckslocalpath = 'GIT:\dbachecks\'
Remove-Module dbatools, dbachecks -ErrorAction SilentlyContinue
Import-Module $dbacheckslocalpath\dbachecks.psd1
$cred = Import-Clixml $CredentialPath
$containers = 'localhost,15589', 'localhost,15588', 'localhost, 15587', 'localhost,15586'
&lt;/code>&lt;/pre>
&lt;p>Now I can start to run my Integration tests. First reset the dbachecks configuration and set some configuration values&lt;/p>
&lt;pre>&lt;code># run the checks against these instances
$null = Set-DbcConfig -Name app.sqlinstance $containers
# We are using SQL authentication
$null = Set-DbcConfig -Name policy.connection.authscheme -Value SQL
# sometimes its a bit slower than the default value
$null = Set-DbcConfig -Name policy.network.latencymaxms -Value 100 # because the containers run a bit slow!
&lt;/code>&lt;/pre>
&lt;p>Then I will run the dbachecks connectivity checks and save the results to a variable without showing any output&lt;/p>
&lt;pre>&lt;code>$ConnectivityTests = Invoke-DbcCheck -SqlCredential $cred -Check Connectivity -Show None -PassThru
&lt;/code>&lt;/pre>
&lt;p>I can then use Pester to check that dbachecks has worked as expected by testing if the failedcount property returned is 0.&lt;/p>
&lt;pre>&lt;code>Describe &amp;quot;Testing the checks are running as expected&amp;quot; -Tag Integration {
Context &amp;quot;Connectivity Checks&amp;quot; {
It &amp;quot;All Tests should pass&amp;quot; {
$ConnectivityTests.FailedCount | Should -Be 0 -Because &amp;quot;We expect all of the checks to run and pass with default settings&amp;quot;
}
}
}
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/01/check-connectivity.png"
loading="lazy"
>&lt;/p>
&lt;h2 id="what-is-the-unit-test-for-this-pr">What is the Unit Test for this PR?
&lt;/h2>&lt;p>Next I think about what we need to be testing for the this PR. The Unit tests will help us.&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/01/what-are-the-unit-tests.png"
loading="lazy"
>&lt;/p>
&lt;h2 id="choose-some-integration-tests">Choose some Integration Tests
&lt;/h2>&lt;p>This check is checking the Agent job history settings and the unit tests are&lt;/p>
&lt;ul>
&lt;li>
&lt;p>It “Passes Check Correctly with Maximum History Rows disabled (-1)”&lt;/p>
&lt;/li>
&lt;li>
&lt;p>It “Fails Check Correctly with Maximum History Rows disabled (-1) but configured value is 1000”&lt;/p>
&lt;/li>
&lt;li>
&lt;p>It “Passes Check Correctly with Maximum History Rows being 10000”&lt;/p>
&lt;/li>
&lt;li>
&lt;p>It “Fails Check Correctly with Maximum History Rows being less than 10000”&lt;/p>
&lt;/li>
&lt;li>
&lt;p>It “Passes Check Correctly with Maximum History Rows per job being 100”&lt;/p>
&lt;/li>
&lt;li>
&lt;p>It “Fails Check Correctly with Maximum History Rows per job being less than 100”&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>So we will check the same things on real actual SQL Servers. First though we need to start the SQL Server Agent as it is not started by default. We can do this as follows&lt;/p>
&lt;pre>&lt;code>docker exec -ti integration_sql2012_1 powershell start-service SQLSERVERAGENT
docker exec -ti integration_sql2014_1 powershell start-service SQLSERVERAGENT
docker exec -ti integration_sql2016_1 powershell start-service SQLSERVERAGENT
docker exec -ti integration_sql2017_1 powershell start-service SQLSERVERAGENT
&lt;/code>&lt;/pre>
&lt;p>Unfortunately, the agent service wont start in the SQL 2014 container so I cant run agent integration tests for that container but it’s better than no integration tests.&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/01/agent-wont-start.png"
loading="lazy"
>&lt;/p>
&lt;h2 id="this-is-what-we-will-test">This is What We Will Test
&lt;/h2>&lt;p>So we want to test if the check will pass with default settings. In general, dbachecks will pass for default instance, agent or database settings values by default.&lt;/p>
&lt;p>We also want the check to fail if the configured value for dbachecks is set to default but the value has been set on the instance.&lt;/p>
&lt;p>We want the check to pass if the configured value for the dbachecks configuration is set and the instance (agent, database) setting matches it.&lt;/p>
&lt;h2 id="if-you-are-doing-something-more-than-once-">If You Are Doing Something More Than Once ……
&lt;/h2>&lt;p>Let’s automate that. We are going to be repeatedly running those three tests for each setting that we are running integration tests for. I have created 3 functions for this again checking that FailedCount or Passed Count is 0 depending on the test.&lt;/p>
&lt;pre>&lt;code>function Invoke-DefaultCheck {
It &amp;quot;All Checks should pass with default for $Check&amp;quot; {
$Tests = get-variable &amp;quot;$($Check)default&amp;quot; -ValueOnly
$Tests.FailedCount | Should -Be 0 -Because &amp;quot;We expect all of the checks to run and pass with default setting (Yes we may set some values before but you get my drift)&amp;quot;
}
}
function Invoke-ConfigCheck {
It &amp;quot;All Checks should fail when config changed for $Check&amp;quot; {
$Tests = get-variable &amp;quot;$($Check)configchanged&amp;quot; -ValueOnly
$Tests.PassedCount | Should -Be 0 -Because &amp;quot;We expect all of the checks to run and fail when we have changed the config values&amp;quot;
}
}
function Invoke-ValueCheck {
It &amp;quot;All Checks should pass when setting changed for $Check&amp;quot; {
$Tests = get-variable &amp;quot;$($Check) value changed&amp;quot; -ValueOnly
$Tests.FailedCount | Should -Be 0 -Because &amp;quot;We expect all of the checks to run and pass when we have changed the settings to match the config values&amp;quot;
}
}
&lt;/code>&lt;/pre>
&lt;p>Now I can use those functions inside a loop in my Integration Pester Test&lt;/p>
&lt;pre>&lt;code>$TestingTheChecks = @('errorlogscount','jobhistory')
Foreach ($Check in $TestingTheChecks) {
Context &amp;quot;$Check Checks&amp;quot; {
Invoke-DefaultCheck
Invoke-ConfigCheck
Invoke-ValueCheck
}
}
&lt;/code>&lt;/pre>
&lt;h2 id="write-some-integration-tests">Write Some Integration Tests
&lt;/h2>&lt;p>So for this new test I have added a value to the TestingTheChecks array then I can test my checks. The default check I can check like this&lt;/p>
&lt;pre>&lt;code># run the checks against these instances (SQL2014 agent wont start :-( ))
$null = Set-DbcConfig -Name app.sqlinstance $containers.Where {$_ -ne 'localhost,15588'}
# by default all tests should pass on default instance settings
$jobhistorydefault = Invoke-DbcCheck -SqlCredential $cred -Check JobHistory -Show None -PassThru
&lt;/code>&lt;/pre>
&lt;p>Now I need to change the configurations so that they do not match the defaults and run the checks again&lt;/p>
&lt;pre>&lt;code>#Change the configuration to test that the checks fail
$null = Set-DbcConfig -Name agent.history. maximumjobhistoryrows -value 1000
$null = Set-DbcConfig -Name agent.history.maximumhistoryrows -value 10000
$jobhistoryconfigchanged = Invoke-DbcCheck -SqlCredential $cred -Check JobHistory -Show None -PassThru
&lt;/code>&lt;/pre>
&lt;p>Next we have to change the instance settings so that they match the dbachecks configuration and run the checks and test that they all pass.&lt;/p>
&lt;p>We will (of course) use &lt;a class="link" href="http://dbatools.io" target="_blank" rel="noopener"
>dbatools&lt;/a> for this. First we need to find the command that we need&lt;/p>
&lt;pre>&lt;code>Find-DbaCommand jobserver
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/01/find-dbacommand.png"
loading="lazy"
>&lt;/p>
&lt;p>and then work out how to use it&lt;/p>
&lt;pre>&lt;code>Get-Help Set-DbaAgentServer -Detailed
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/01/set-the-values.png"
loading="lazy"
>&lt;/p>
&lt;p>There is an example that does exactly what we want 🙂 So we can run this.&lt;/p>
&lt;pre>&lt;code>$setDbaAgentServerSplat = @{
MaximumJobHistoryRows = 1000
MaximumHistoryRows = 10000
SqlInstance = $containers.Where{$_ -ne 'localhost,15588'}
SqlCredential = $cred
}
Set-DbaAgentServer @setDbaAgentServerSplat
$jobhistoryvaluechanged = Invoke-DbcCheck -SqlCredential $cred -Check JobHistory -Show None -PassThru
&lt;/code>&lt;/pre>
&lt;h2 id="run-the-integration-tests">Run the Integration Tests
&lt;/h2>&lt;p>And then we will check that all of the checks are passing and failing as expected&lt;/p>
&lt;pre>&lt;code>Invoke-Pester .\DockerTests.ps1
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/01/testing-the-checks.png"
loading="lazy"
>&lt;/p>
&lt;h2 id="integration-test-for-error-log-counts">Integration Test For Error Log Counts
&lt;/h2>&lt;p>There is another integration test there for the error logs count. This works in the same way. Here is the code&lt;/p>
&lt;pre>&lt;code>#region error Log Count - PR 583
# default test
$errorlogscountdefault = Invoke-DbcCheck -SqlCredential $cred -Check ErrorLogCount -Show None -PassThru
# set a value and then it will fail
$null = Set-DbcConfig -Name policy.errorlog.logcount -Value 10
$errorlogscountconfigchanged = Invoke-DbcCheck -SqlCredential $cred -Check ErrorLogCount -Show None -PassThru
# set the value and then it will pass
$null = Set-DbaErrorLogConfig -SqlInstance $containers -SqlCredential $cred -LogCount 10
$errorlogscountvaluechanged = Invoke-DbcCheck -SqlCredential $cred -Check ErrorLogCount -Show None -PassThru
#endregion
&lt;/code>&lt;/pre>
&lt;h2 id="merge-the-changes">Merge the Changes
&lt;/h2>&lt;p>So with all the tests passing I can merge the PR into the development branch and Azure DevOps will start a build. Ultimately, I would like to add the integration to the build as well following &lt;a class="link" href="https://twitter.com/AndreKamman" target="_blank" rel="noopener"
>André&lt;/a>‘s blog post but for now I used the GitHub Pull Request extension to merge the pull request into development which started a &lt;a class="link" href="https://dataplat.visualstudio.com/dbachecks/_build/results?buildId=365&amp;amp;view=results" target="_blank" rel="noopener"
>build&lt;/a> and then merged that into master which signed the code and deployed it to the PowerShell gallery as you can see &lt;a class="link" href="https://dataplat.visualstudio.com/dbachecks/_releaseProgress?_a=release-environment-logs&amp;amp;releaseId=81&amp;amp;environmentId=81" target="_blank" rel="noopener"
>here&lt;/a> and the result is&lt;/p>
&lt;p>&lt;a class="link" href="https://www.powershellgallery.com/packages/dbachecks/1.1.164" target="_blank" rel="noopener"
>https://www.powershellgallery.com/packages/dbachecks/1.1.164&lt;/a>&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2019/01/powershell-gallery.png"
loading="lazy"
>&lt;/p></description></item><item><title>Checking Trace Flags with dbachecks, online docs and PSPowerHour</title><link>https://dbachecks.io/blog/checking-trace-flags-with-dbachecks-online-docs-and-pspowerhour/</link><pubDate>Sat, 29 Sep 2018 00:00:00 +0000</pubDate><guid>https://dbachecks.io/blog/checking-trace-flags-with-dbachecks-online-docs-and-pspowerhour/</guid><description>&lt;p>It’s been a few weeks since i have blogged as I have been busy with a lot of other things. One of which is preparing for &lt;a class="link" href="https://www.pass.org/summit/2018/Sessions/Details.aspxsid=80306" target="_blank" rel="noopener"
>my SQL Pass Summit pre-con&lt;/a> which has lead to me improving the CI/CD for &lt;a class="link" href="http://dbachecks.io" target="_blank" rel="noopener"
>dbachecks&lt;/a> by adding auto-creation of online documentation, which you can find at &lt;a class="link" href="https://dbachecks.readthedocs.io" target="_blank" rel="noopener"
>https://dbachecks.readthedocs.io&lt;/a> or by running Get-Help with the -Online switch for any dbachecks command.&lt;/p>
&lt;p>Get-Help Invoke-DbcCheck -Online&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/09/01-online-help.png"
loading="lazy"
alt="01 - online help.png"
>&lt;/p>
&lt;p>I will blog about how dbachecks uses &lt;a class="link" href="https://azure.microsoft.com/en-us/services/devops/" target="_blank" rel="noopener"
>Azure DevOps&lt;/a> to do this another time&lt;/p>
&lt;h2 id="pspowerhour">PSPowerHour
&lt;/h2>&lt;p>The PowerShell community members &lt;a class="link" href="https://twitter.com/barbariankb" target="_blank" rel="noopener"
>Michael T Lombardi&lt;/a> and &lt;a class="link" href="http://twitter.com/psCookieMonster" target="_blank" rel="noopener"
>Warren Frame&lt;/a> have created &lt;a class="link" href="https://github.com/PSPowerHour/PSPowerHour" target="_blank" rel="noopener"
>PSPowerHour&lt;/a>. PSPowerHour is “like a virtual User Group, with a lightning-demo format, and room for non-PowerShell-specific content. Eight community members will give a demo each PowerHour.”&lt;/p>
&lt;p>&lt;a class="link" href="http://twitter.com/cl" target="_blank" rel="noopener"
>Chrissy&lt;/a> blogged about the first one &lt;a class="link" href="https://dbatools.io/pspowerhour/" target="_blank" rel="noopener"
>on the dbatools blog&lt;/a>&lt;/p>
&lt;p>You can watch the videos on the &lt;a class="link" href="https://www.youtube.com/channel/UCtHKcGei3EjxBNYQCFZ3WNQ" target="_blank" rel="noopener"
>Youtube channel&lt;/a> and keep an eye out for more online &lt;a class="link" href="https://twitter.com/hashtag/PSPowerHoursrc=hash" target="_blank" rel="noopener"
>PSPowerHours via twitter&lt;/a> or &lt;a class="link" href="https://github.com/PSPowerHour/PSPowerHour" target="_blank" rel="noopener"
>the GitHub page&lt;/a>.&lt;/p>
&lt;p>While watching the first group of sessions &lt;a class="link" href="https://twitter.com/awickham" target="_blank" rel="noopener"
>Andrew Wickham&lt;/a> demonstrated using dbatools with trace flags and I thought that needs to be added to dbachecks so I created &lt;a class="link" href="https://github.com/dataplat/dbachecks/issues/529" target="_blank" rel="noopener"
>an issue.&lt;/a> Anyone can do this to file improvements as well as bugs for members of the team to code.&lt;/p>
&lt;h2 id="trace-flags">Trace Flags
&lt;/h2>&lt;p>The previous release of dbachecks brought 2 new checks for traceflags. One for traceflags expected to be running and one for traceflags not expected to be running.&lt;/p>
&lt;p>You will need to have installed &lt;a class="link" href="https://www.powershellgallery.com/packages/dbachecks" target="_blank" rel="noopener"
>dbachecks from the PowerShell Gallery&lt;/a> to do this. This can be done using&lt;/p>
&lt;p>Install-Module -Name dbachecks&lt;/p>
&lt;p>Once dbachecks is installed you can find the checks using&lt;/p>
&lt;p>Get-DBcCheck&lt;/p>
&lt;p>you can filter using the pattern parameter&lt;/p>
&lt;p>Get-DBcCheck -Pattern traceflag&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/09/02-get0dbcconfig.png"
loading="lazy"
alt="02 - get0dbcconfig.png"
>&lt;/p>
&lt;p>This will show you&lt;/p>
&lt;ul>
&lt;li>the UniqueTag which will enable you to run only that check if you wish&lt;/li>
&lt;li>AllTags which shows which tags will include that check&lt;/li>
&lt;li>Config will show you which configuration items can be set for this check&lt;/li>
&lt;/ul>
&lt;p>The trace flag checks require the app.sqlinstance configuration which is the list of SQL instances that the checks will run against. You can also specify the instances as a parameter for &lt;a class="link" href="https://dbachecks.readthedocs.io/en/latest/functions/Invoke-DbcCheck/" target="_blank" rel="noopener"
>Invoke-DbCheck&lt;/a> as well.&lt;/p>
&lt;p>The configuration for the expected traceflags is policy.traceflags.expected By default it is set to null. You can see what configuration it has using&lt;/p>
&lt;p>Get-DBcConfig policy.traceflags.expected&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/09/get-dbcconfig.png"
loading="lazy"
alt="get-dbcconfig.png"
>&lt;/p>
&lt;p>So if you want to check that there are no trace flags running, then you can run&lt;/p>
&lt;p>$instance = &amp;lsquo;sql0&amp;rsquo;
Set-DbcConfig -Name app.sqlinstance -Value $instance
Invoke-DbcCheck -Check TraceFlagsExpected&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/09/check-1.png"
loading="lazy"
alt="check 1.png"
>&lt;/p>
&lt;p>Maybe this instance is required to have &lt;a class="link" href="https://blogs.msdn.microsoft.com/sql_pfe_blog/2017/07/18/trace-flag-1117-growth-and-contention/" target="_blank" rel="noopener"
>trace flag 1117 enabled&lt;/a> so that &lt;a class="link" href="https://www.brentozar.com/archive/2014/06/trace-flags-1117-1118-tempdb-configuration/" target="_blank" rel="noopener"
>all files in a file group grow equally&lt;/a>, you can set the trace flag you expect to be running using&lt;/p>
&lt;p>Set-DbcConfig -Name policy.traceflags.expected -Value 1117&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/09/set-config.png"
loading="lazy"
alt="set config.png"
>&lt;/p>
&lt;p>Now you when you run the check it fails&lt;/p>
&lt;p>Invoke-DbcCheck -Check TraceFlagsExpecte&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/09/not-found.png"
loading="lazy"
alt="not found.png"
>&lt;/p>
&lt;p>and gives you the error message&lt;/p>
&lt;blockquote>
&lt;p> [-] Expected Trace Flags 1117 exist on sql0 593ms
Expected 1117 to be found in collection @(), because We expect that Trace Flag 1117 will be set on sql0, but it was not found.&lt;/p>&lt;/blockquote>
&lt;p>So we have a failing test. We need to fix that. We can use &lt;a class="link" href="http://dbatools.io" target="_blank" rel="noopener"
>dbatools&lt;/a>&lt;/p>
&lt;p>Enable-DbaTraceFlag -SqlInstance $instance -TraceFlag 1117&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/09/set-traceflag.png"
loading="lazy"
alt="set traceflag.png"
>&lt;/p>
&lt;p>This time when we run the check&lt;/p>
&lt;p>&lt;code>Invoke-DbcCheck -Check TraceFlagsExpected&lt;/code>&lt;/p>
&lt;p>it passes&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/09/passed-test.png"
loading="lazy"
alt="passed test"
>&lt;/p>
&lt;p>If you just need to see what trace flags are enabled you can use&lt;/p>
&lt;p>&lt;code>Get-DbaTraceFlag -SqlInstance $instance&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/09/get-trace-flag.png"
loading="lazy"
alt="get trace flag.png"
>&lt;/p>
&lt;p>Reset the configuration for the expected trace flag to an empty array and then set the configuration for traceflags we do not expect to be running to 1117&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Set-DbcConfig -Name policy.traceflags.expected -Value @()
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-DbcConfig -Name policy.traceflags.notexpected -Value 1117
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/09/set-config-2.png"
loading="lazy"
alt="set config 2.png"
>&lt;/p>
&lt;p>and then run the trace flags not expected to be running check with&lt;/p>
&lt;p>&lt;code>Invoke-DbcCheck -Check TraceFlagsNotExpected&lt;/code>&lt;/p>
&lt;p>It will fail as 1117 is still running&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/09/not-expected-fail.png"
loading="lazy"
alt="not expected fail.png"
>&lt;/p>
&lt;p>and give the message&lt;/p>
&lt;blockquote>
&lt;p>[-] Expected Trace Flags 1117 to not exist on sql0 321ms
Expected 1117 to not be found in collection 1117, because We expect that Trace Flag 1117 will not be set on sql0, but it was found.&lt;/p>&lt;/blockquote>
&lt;p>So to resolve this failing check we need to disable the trace flag and we can do that with dbatools using&lt;/p>
&lt;p>&lt;code>Disable-DbaTraceFlag -SqlInstance $instance -TraceFlag 1117&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/09/disable-trace-flag-1.png"
loading="lazy"
alt="disable trace flag"
>&lt;/p>
&lt;p>and now when we run the check&lt;/p>
&lt;p>&lt;code>Invoke-DbcCheck -Check TraceFlagsNotExpected&lt;/code>&lt;/p>
&lt;p>it passes&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/09/passed-bnot-expected.png"
loading="lazy"
alt="passed bnot expected.png"
>&lt;/p>
&lt;p>The checks also work with multiple traceflags so you can set multiple values for trace flags that are not expexted to be running&lt;/p>
&lt;p>&lt;code>Set-DbcConfig -Name policy.traceflags.notexpected -Value 1117, 1118&lt;/code>&lt;/p>
&lt;p>and as we saw earlier, you can run both trace flag checks using&lt;/p>
&lt;p>&lt;code>Invoke-DbcCheck -Check TraceFlag&lt;/code>&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/09/multi-checks.png"
loading="lazy"
alt="multi checks.png"
>&lt;/p>
&lt;p>You can use this or any of the 95 available checks to validate that your SQL instances, singular or your whole estate are as you expect them to be.&lt;/p></description></item><item><title>Using the PowerShell AST to find a ForEach Method</title><link>https://dbachecks.io/blog/using-the-powershell-ast-to-find-a-foreach-method/</link><pubDate>Thu, 16 Aug 2018 00:00:00 +0000</pubDate><guid>https://dbachecks.io/blog/using-the-powershell-ast-to-find-a-foreach-method/</guid><description>&lt;img src="https://dbachecks.io/assets/uploads/2018/08/server.png" alt="Featured image of post Using the PowerShell AST to find a ForEach Method" />&lt;p>In &lt;a class="link" href="http://dbachecks.io" target="_blank" rel="noopener"
>dbachecks&lt;/a> we enable people to see what checks are available by running Get-DbcCheck. This gives a number of properties including the ‘type’ of check. This refers to the configuration item or parameter that is required to have a value for this check to run.&lt;/p>
&lt;p>For example – Any check to do with SQL Agent is of type Sqlinstance because it requires an instance to be specified but a check for SPN is of type ComputerName because it requires a computer name to run.&lt;/p>
&lt;h2 id="automation-for-the-win">Automation for the win
&lt;/h2>&lt;p>Because I believe in automation I do not want to have to hard code these values anywhere but create them when the module is imported so we use a json file to feed Get-DbcCheck and populate the Json file when we import the module. This is done using the &lt;a class="link" href="https://dbachecks.io/using-the-ast-in-pester-for-dbachecks/" >method that I described here&lt;/a> and means that whenever a new check is added it is automatically available in Get-DbcCheck without any extra work.&lt;/p>
&lt;p>We use code like this&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">## Parse the file with AST
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$CheckFileAST = [Management.Automation.Language.Parser]::ParseInput($check, [ref]$null, [ref]$null)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">## Old code we can use the describes
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$Describes = $CheckFileAST.FindAll([Func[Management.Automation.Language.Ast, bool]] {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> param ($ast)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> $ast.CommandElements -and
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> $ast.CommandElements[0].Value -eq &amp;#39;describe&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }, $true)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">@($describes).ForEach{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> $groups += $filename
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> $Describe = $_.CommandElements.Where{$PSItem.StaticType.name -eq &amp;#39;string&amp;#39;}[1]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> $title = $Describe.Value
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> $Tags = $PSItem.CommandElements.Where{$PSItem.StaticType.name -eq &amp;#39;Object[]&amp;#39; -and $psitem.Value -eq $null}.Extent.Text.ToString().Replace(&amp;#39;, $filename&amp;#39;, &amp;#39;&amp;#39;)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> # CHoose the type
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if ($Describe.Parent -match &amp;#34;Get-Instance&amp;#34;) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> $type = &amp;#34;Sqlinstance&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> elseif ($Describe.Parent -match &amp;#34;Get-ComputerName&amp;#34; -or $Describe.Parent -match &amp;#34;AllServerInfo&amp;#34;) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> $type = &amp;#34;ComputerName&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> elseif ($Describe.Parent -match &amp;#34;Get-ClusterObject&amp;#34;) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> $Type = &amp;#34;ClusteNode&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>First we parse the code with the AST and store that in the CheckFileAST variable, then we use the FindAll method to find any command elements that match “Describe” which conveniently gets our describes and then we can simply match the Parent object which holds some code to each function that we use to get our values to be passed to the tests &lt;code>Get-ComputerName&lt;/code>, &lt;code>Get-Instance&lt;/code>, &lt;code>Get-ClusterObject&lt;/code> and set the type appropriately.&lt;/p>
&lt;p>which when run against a check like this&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Describe &amp;#34;Backup Path Access&amp;#34; -Tags BackupPathAccess, Storage, DISA, $filename {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @(Get-Instance).ForEach{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if ($NotContactable -contains $psitem) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Context &amp;#34;Testing Backup Path Access on $psitem&amp;#34; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> It &amp;#34;Can&amp;#39;t Connect to $Psitem&amp;#34; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> $false| Should -BeTrue -Because &amp;#34;The instance should be available to be connected to!&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> else {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Context &amp;#34;Testing Backup Path Access on $psitem&amp;#34; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> $backuppath = Get-DbcConfigValue policy.storage.backuppath
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> if (-not$backuppath) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> $backuppath = (Get-DbaDefaultPath-SqlInstance $psitem).Backup
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> It &amp;#34;can access backup path ($backuppath) on $psitem&amp;#34; {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Test-DbaSqlPath-SqlInstance $psitem -Path $backuppath| Should -BeTrue -Because &amp;#39;The SQL Service account needs to have access to the backup path to backup your databases&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>will find the describe block and get the title “Backup Path Access”  and the tags BackupPathAccess, Storage, DISA, $filename and then find the Get-Instance and set the type to SqlInstance&lt;/p>
&lt;h2 id="until-rob-breaks-it">Until Rob breaks it!
&lt;/h2>&lt;p>This has worked wonderfully well for 6 months or so of the life of dbachecks but this week I broke it!&lt;/p>
&lt;p>The problem was the performance of the code. It is taking a long time to run the tests and I am looking at ways to improve this. I was looking at the Server.Tests file because I thought why not start with one of the smaller files.&lt;/p>
&lt;p>It runs the following checks&lt;/p>
&lt;ul>
&lt;li>Server Power Plan Configuration&lt;/li>
&lt;li>SPNs&lt;/li>
&lt;li>Disk Space&lt;/li>
&lt;li>Ping Computer&lt;/li>
&lt;li>CPUPrioritisation&lt;/li>
&lt;li>Disk Allocation Unit&lt;/li>
&lt;li>Instance Connection&lt;/li>
&lt;/ul>
&lt;p>and it was looping through the computer names for each check like this&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">Describe &amp;#34;Server Power Plan Configuration&amp;#34; -Tags PowerPlan, $filename {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @(Get-ComputerName).ForEach{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Describe &amp;#34;Instance Connection&amp;#34; -Tags InstanceConnection, Connectivity, $filename {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @(Get-Instance).ForEach{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Describe &amp;#34;SPNs&amp;#34; -Tags SPN, $filename {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @(Get-ComputerName).ForEach{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Describe &amp;#34;Disk Space&amp;#34; -Tags DiskCapacity, Storage, DISA, $filename {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @(Get-ComputerName).ForEach{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Describe &amp;#34;Ping Computer&amp;#34; -Tags PingComputer, $filename {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @(Get-ComputerName).ForEach{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Describe &amp;#34;CPUPrioritisation&amp;#34; -Tags CPUPrioritisation, $filename {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @(Get-ComputerName).ForEach{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Describe &amp;#34;Disk Allocation Unit&amp;#34; -Tags DiskAllocationUnit, $filename {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @(Get-ComputerName).ForEach{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>I altered it to have only one loop for the computer names like so&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">@(Get-ComputerName).ForEach{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Describe &amp;#34;Server Power Plan Configuration&amp;#34; -Tags PowerPlan, $filename {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Describe &amp;#34;SPNs&amp;#34; -Tags SPN, $filename {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Describe &amp;#34;Disk Space&amp;#34; -Tags DiskCapacity, Storage, DISA, $filename {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Describe &amp;#34;Ping Computer&amp;#34; -Tags PingComputer, $filename {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Describe &amp;#34;CPUPrioritisation&amp;#34; -Tags CPUPrioritisation, $filename {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> Describe &amp;#34;Disk Allocation Unit&amp;#34; -Tags DiskAllocationUnit, $filename {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Describe &amp;#34;Instance Connection&amp;#34; -Tags InstanceConnection, Connectivity, $filename {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> @(Get-Instance).ForEach{
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>and immediately in testing my checks for the Server Tag decreased in time by about 60% 🙂&lt;/p>
&lt;p>I was very happy.&lt;/p>
&lt;p>Then I added it to the dbachecks module on my machine, loaded the module and realised that my Json file for &lt;code>Get-DbcCheck &lt;/code>was no longer being populated for the type because this line&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">elseif ($Describe.Parent-match&amp;#34;Get-ComputerName&amp;#34;-or$Describe.Parent-match&amp;#34;AllServerInfo&amp;#34;)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>was no longer true.&lt;/p>
&lt;h2 id="ast-for-other-things">AST for other things
&lt;/h2>&lt;p>So I googled &lt;a class="link" href="http://Management.Automation.Language.Ast" target="_blank" rel="noopener"
>Management.Automation.Language.Ast&lt;/a> the first result lead me to &lt;a class="link" href="https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.language.invokememberexpressionast?view=powershellsdk-1.1.0" target="_blank" rel="noopener"
>docs.microsoft&lt;/a> There are a number of different language elements available there and I found &lt;a class="link" href="https://docs.microsoft.com/en-us/dotnet/api/system.management.automation.language.invokememberexpressionast?view=powershellsdk-1.1.0" target="_blank" rel="noopener"
>InvokeMemberExpressionAst&lt;/a> which will let me find any methods that have been invoked, so now I can find the loops with&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">$ComputerNameForEach = $CheckFileAST.FindAll([Func[Management.Automation.Language.Ast, bool]] {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> param ($ast)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> $ast -is [System.Management.Automation.Language.InvokeMemberExpressionAst]
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> }, $true)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>When I examined the object returned I could see that I could further limit the result to get only the method for Get-ComputerName and then if I choose the Extent I can get the code of that loop&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">## New code uses a Computer Name loop to speed up execution so need to find that as well
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ComputerNameForEach=$CheckFileAST.FindAll([Func[Management.Automation.Language.Ast,bool]] {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">param ($ast)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$ast-is [System.Management.Automation.Language.InvokeMemberExpressionAst] -and$ast.expression.Subexpression.Extent.Text-eq&amp;#39;Get-ComputerName&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}, $true).Extent
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>and now I can match the Tags to the type again :-)&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">if ($ComputerNameForEach-match$title) {
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">$type=&amp;#34;ComputerName&amp;#34;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>and now &lt;code>Get-DbcCheck&lt;/code> is returning the right results and the checks are a little faster&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/08/server.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/08/server.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>You can find &lt;a class="link" href="http://powershellgallery.com/packages/dbachecks" target="_blank" rel="noopener"
>dbachecks on the PowerShell Gallery&lt;/a> or install it using&lt;/p>
&lt;p>Install-Module dbachecks -Scope CurrentUser&lt;/p></description></item><item><title>A PowerShell Pester Check for parsing SQL scripts</title><link>https://dbachecks.io/blog/a-powershell-pester-check-for-parsing-sql-scripts/</link><pubDate>Wed, 25 Jul 2018 00:00:00 +0000</pubDate><guid>https://dbachecks.io/blog/a-powershell-pester-check-for-parsing-sql-scripts/</guid><description>&lt;p>I like &lt;a class="link" href="https://blog.robsewell.com/?s=pester" target="_blank" rel="noopener"
>to write Pester checks&lt;/a> to make sure that all is as expected! This is just a quick post as much to help me remember this script 🙂&lt;/p>
&lt;p>This is a quick Pester test I wrote to ensure that some SQL Scripts in a directory would parse so there was some guarantee that they were valid T-SQL. It uses the SQLParser.dll and because it was using a build server without SQL Server I have to load the required DLLs from the &lt;a class="link" href="http://dbatools.io" target="_blank" rel="noopener"
>dbatools&lt;/a> module (Thank you dbatools 🙂 )&lt;/p>
&lt;p>It simply runs through all of the .sql files and runs the parser against them and checks the errors. In the case of failures it will output where it failed in the error message in the failed Pester result as well.&lt;/p>
&lt;p>You will need &lt;a class="link" href="http://dbatools.io/install" target="_blank" rel="noopener"
>dbatools module installed&lt;/a> on the instance and at least &lt;a class="link" href="https://github.com/pester/Pester/wiki/Installation-and-Updatehttps://github.com/pester/Pester/wiki/Installation-and-Update" target="_blank" rel="noopener"
>version 4 of the Pester module&lt;/a> as well&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-gdscript3" data-lang="gdscript3">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Describe&lt;/span> &lt;span class="s2">&amp;#34;Testing SQL&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Context&lt;/span> &lt;span class="s2">&amp;#34;Running Parser&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">## Load assembly&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">$&lt;/span>&lt;span class="n">Parserdll&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Get&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">ChildItem&lt;/span> &lt;span class="s1">&amp;#39;C:&lt;/span>&lt;span class="se">\\&lt;/span>&lt;span class="s1">Program Files&lt;/span>&lt;span class="se">\\&lt;/span>&lt;span class="s1">WindowsPowerShell&lt;/span>&lt;span class="se">\\&lt;/span>&lt;span class="s1">Modules&lt;/span>&lt;span class="se">\\&lt;/span>&lt;span class="s1">dbatools&amp;#39;&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">Include&lt;/span> &lt;span class="n">Microsoft&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">SqlServer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Management&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">SqlParser&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dll&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">Recurse&lt;/span>&lt;span class="p">)&lt;/span>\&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>\&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">FullName&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> \&lt;span class="p">[&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Reflection&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Assembly&lt;/span>\&lt;span class="p">]::&lt;/span>&lt;span class="n">LoadFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="n">Parserdll&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">Out&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">Null&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">$&lt;/span>&lt;span class="n">TraceDll&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">Get&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">ChildItem&lt;/span> &lt;span class="s1">&amp;#39;C:&lt;/span>&lt;span class="se">\\&lt;/span>&lt;span class="s1">Program Files&lt;/span>&lt;span class="se">\\&lt;/span>&lt;span class="s1">WindowsPowerShell&lt;/span>&lt;span class="se">\\&lt;/span>&lt;span class="s1">Modules&lt;/span>&lt;span class="se">\\&lt;/span>&lt;span class="s1">dbatools&amp;#39;&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">Include&lt;/span> &lt;span class="n">Microsoft&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">SqlServer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Diagnostics&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Strace&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">dll&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">Recurse&lt;/span>&lt;span class="p">)&lt;/span>\&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>\&lt;span class="p">]&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">FullName&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> \&lt;span class="p">[&lt;/span>&lt;span class="n">System&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Reflection&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Assembly&lt;/span>\&lt;span class="p">]::&lt;/span>&lt;span class="n">LoadFile&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="n">TraceDll&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">Out&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">Null&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">$&lt;/span>&lt;span class="n">ParseOptions&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">New&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="ne">Object&lt;/span> &lt;span class="n">Microsoft&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">SqlServer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Management&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">SqlParser&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Parser&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ParseOptions&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">$&lt;/span>&lt;span class="n">ParseOptions&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">BatchSeparator&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s1">&amp;#39;GO&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">$&lt;/span>&lt;span class="n">files&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Get&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">ChildItem&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="ne">Path&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="n">Env&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="ne">Directory&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">Include&lt;/span> &lt;span class="o">*.&lt;/span>&lt;span class="n">sql&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">Recurse&lt;/span> &lt;span class="c1">## This variable is set as a Build Process Variable or put your path here&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">$&lt;/span>&lt;span class="n">files&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">ForEach&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">It&lt;/span> &lt;span class="s2">&amp;#34;$($Psitem.FullName) Should Parse SQL correctly&amp;#34;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">$&lt;/span>&lt;span class="n">filename&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="n">Psitem&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">FullName&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">$&lt;/span>&lt;span class="n">sql&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">Get&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">Content&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">LiteralPath&lt;/span> &lt;span class="s2">&amp;#34;$fileName&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">$&lt;/span>&lt;span class="ne">Script&lt;/span> &lt;span class="o">=&lt;/span> \&lt;span class="p">[&lt;/span>&lt;span class="n">Microsoft&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">SqlServer&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Management&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">SqlParser&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Parser&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Parser&lt;/span>\&lt;span class="p">]::&lt;/span>&lt;span class="n">Parse&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">$&lt;/span>&lt;span class="n">SQL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">$&lt;/span>&lt;span class="n">ParseOptions&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">$&lt;/span>&lt;span class="ne">Script&lt;/span>&lt;span class="o">.&lt;/span>&lt;span class="n">Errors&lt;/span> &lt;span class="o">|&lt;/span> &lt;span class="n">Should&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">BeNullOrEmpty&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Version Update, Code Signing and publishing to the PowerShell Gallery with VSTS</title><link>https://dbachecks.io/blog/version-update-code-signing-and-publishing-to-the-powershell-gallery-with-vsts/</link><pubDate>Tue, 01 May 2018 00:00:00 +0000</pubDate><guid>https://dbachecks.io/blog/version-update-code-signing-and-publishing-to-the-powershell-gallery-with-vsts/</guid><description>&lt;img src="https://dbachecks.io/assets/uploads/2018/05/32-Dashboard.png" alt="Featured image of post Version Update, Code Signing and publishing to the PowerShell Gallery with VSTS" />&lt;p>At the fabulous &lt;a class="link" href="http://psconf.eu" target="_blank" rel="noopener"
>PowerShell Conference EU&lt;/a> I presented about Continuous Delivery to the PowerShell Gallery with VSTS and explained how we use VSTS to enable CD for &lt;a class="link" href="http://dbachecks.io" target="_blank" rel="noopener"
>dbachecks&lt;/a>. We even released a new version during the session 🙂&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>So how do we achieve this?&lt;/p>
&lt;p>We have a few steps&lt;/p>
&lt;ul>
&lt;li>Create a project and link to our GitHub&lt;/li>
&lt;li>Run unit uests with Pester to make sure that our code is doing what we expect.&lt;/li>
&lt;li>Update our module version and commit the change to GitHub&lt;/li>
&lt;li>Sign our code with a code signing certificate&lt;/li>
&lt;li>Publish to the PowerShell Gallery&lt;/li>
&lt;/ul>
&lt;h2 id="create-project-and-link-to-github">Create Project and link to GitHub
&lt;/h2>&lt;p>First you need to create a VSTS project by going to &lt;a class="link" href="https://www.visualstudio.com/" target="_blank" rel="noopener"
>https://www.visualstudio.com/&lt;/a> This is free for up to 5 users with 1 concurrent CI/CD queue limited to a maximum of 60 minutes run time which should be more than enough for your PowerShell module.&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/05/01-sign-up-1.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/05/01-sign-up-1.png"
loading="lazy"
alt="01 - sign up.png"
>&lt;/a>&lt;/p>
&lt;p>Click on Get Started for free under Visual Studio Team Services and fill in the required information. Then on the front page click new project&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/05/02-New-Project.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/05/02-New-Project.png"
loading="lazy"
alt="02 - New Project.png"
>&lt;/a>&lt;/p>
&lt;p>Fill in the details and click create&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/05/03-create-project.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/05/03-create-project.png"
loading="lazy"
alt="03 - create project.png"
>&lt;/a>&lt;/p>
&lt;p>Click on builds and then new definition&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/05/04-builds.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/05/04-builds.png"
loading="lazy"
alt="04- builds.png"
>&lt;/a>&lt;/p>
&lt;p>next you need to link your project to your GitHub (or other source control providers) repository&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/05/05-github-auth.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/05/05-github-auth.png"
loading="lazy"
alt="05 - github auth.png"
>&lt;/a>&lt;/p>
&lt;p>You can either authorise with OAuth or you can &lt;a class="link" href="https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/" target="_blank" rel="noopener"
>provide a PAT token following the instructions here&lt;/a>. Once that is complete choose your repo. Save the PAT as you will need it later in the process!&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/05/06-choose-repo.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/05/06-choose-repo.png"
loading="lazy"
alt="06 - choose repo.png"
>&lt;/a>&lt;/p>
&lt;p>and choose the branch that you want this build definition to run against.&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/05/07-branch.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/05/07-branch.png"
loading="lazy"
alt="07 branch.png"
>&lt;/a>&lt;/p>
&lt;p>I chose to run the Unit Tests when a PR was merged into the development branch. I will then create another build definition for the master branch to sign the code and update module version. This enables us to push several PRs into the development branch and create a single release for the gallery.&lt;/p>
&lt;p>Then I start with an empty process&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/05/08-empty-process.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/05/08-empty-process.png"
loading="lazy"
alt="08 - empty process.png"
>&lt;/a>&lt;/p>
&lt;p>and give it a suitable name&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/05/09-name-it.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/05/09-name-it.png"
loading="lazy"
alt="09 - name it.png"
>&lt;/a>&lt;/p>
&lt;p>i chose the hosted queue but you can download an agent to your build server if you need to do more or your integration tests require access to other resources not available on the hosted agent.&lt;/p>
&lt;h2 id="run-unit-tests-with-pester">Run Unit Tests with Pester
&lt;/h2>&lt;p>We have a number of Unit tests in our &lt;a class="link" href="https://github.com/dataplat/dbachecks/tree/development/tests" target="_blank" rel="noopener"
>tests folder in dbachecks&lt;/a> so we want to run them to ensure that everything is as it should be and the new code will not break existing functionality (and for dbachecks the &lt;a class="link" href="https://dbachecks.io/using-the-ast-in-pester-for-dbachecks/" >format of the PowerBi&lt;/a>)&lt;/p>
&lt;p>You can use the &lt;a class="link" href="https://marketplace.visualstudio.com/items?itemName=richardfennellBM.BM-VSTS-PesterRunner-Task" target="_blank" rel="noopener"
>Pester Test Runner Build Task&lt;/a> from the folk at &lt;a class="link" href="http://blackmarble.com/" target="_blank" rel="noopener"
>Black Marble&lt;/a> by clicking on the + sign next to Phase 1 and searching for Pester&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/05/10-Pester-task-runner.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/05/10-Pester-task-runner.png"
loading="lazy"
alt="10 - Pester task runner.png"
>&lt;/a>&lt;/p>
&lt;p>You will need to click Get It Free to install it and then click add to add the task to your build definition. You can pretty much leave it as default if you wish and Pester will run all of the *.Tests.ps1 files that it finds in the directory where it downloads the GitHub repo which is referred to using the variable $(Build.SourcesDirectory). It will then output the results to a json file called Test-Pester.XML ready for publishing.&lt;/p>
&lt;p>However, as dbachecks has a number of dependent modules, this task was not suitable. I spoke with Chris Gardner  &lt;a class="link" href="https://chrislgardner.github.io/" target="_blank" rel="noopener"
>b&lt;/a> | &lt;a class="link" href="https://twitter.com/HalbaradKenafin" target="_blank" rel="noopener"
>t&lt;/a>  from Black Marble at the PowerShell Conference and he says that this can be resolved so look out for the update. Chris is a great guy and always willing to help, you can often find him in the &lt;a class="link" href="http://slack.poshcode.org/" target="_blank" rel="noopener"
>PowerShell Slack channel&lt;/a> answering questions and helping people&lt;/p>
&lt;p>But as you can use PowerShell in VSTS tasks, this is not a problem although you need to write your PowerShell using try catch to make sure that your task fails when your PowerShell errors. This is the code I use to install the modules&lt;/p>
&lt;p>$ErrorActionPreference = &amp;lsquo;Stop&amp;rsquo;&lt;/p>
&lt;p># Set location to module home path in artifacts directory
try {
Set-Location $(Build.SourcesDirectory)
Get-ChildItem
}
catch {
Write-Error &amp;ldquo;Failed to set location&amp;rdquo;&lt;/p>
&lt;p>}&lt;/p>
&lt;p># Get the Module versions
Install-Module Configuration -Scope CurrentUser -Force
$Modules = Get-ManifestValue -Path .\dbachecks.psd1 -PropertyName RequiredModules&lt;/p>
&lt;p>$PesterVersion = $Modules.Where{$&lt;em>.Get_Item(&amp;lsquo;ModuleName&amp;rsquo;) -eq &amp;lsquo;Pester&amp;rsquo;}[0].Get_Item(&amp;lsquo;ModuleVersion&amp;rsquo;)
$PSFrameworkVersion = $Modules.Where{$&lt;/em>.Get_Item(&amp;lsquo;ModuleName&amp;rsquo;) -eq &amp;lsquo;PSFramework&amp;rsquo;}[0].Get_Item(&amp;lsquo;ModuleVersion&amp;rsquo;)
$dbatoolsVersion = $Modules.Where{$_.Get_Item(&amp;lsquo;ModuleName&amp;rsquo;) -eq &amp;lsquo;dbatools&amp;rsquo;}[0].Get_Item(&amp;lsquo;ModuleVersion&amp;rsquo;)&lt;/p>
&lt;p># Install Pester
try {
Write-Output &amp;ldquo;Installing Pester&amp;rdquo;
Install-Module Pester -RequiredVersion $PesterVersion -Scope CurrentUser -Force -SkipPublisherCheck
Write-Output &amp;ldquo;Installed Pester&amp;rdquo;&lt;/p>
&lt;p>}
catch {
Write-Error &amp;ldquo;Failed to Install Pester $($_)&amp;rdquo;
}
# Install dbatools
try {
Write-Output &amp;ldquo;Installing PSFramework&amp;rdquo;
Install-Module PSFramework -RequiredVersion $PsFrameworkVersion -Scope CurrentUser -Force
Write-Output &amp;ldquo;Installed PSFramework&amp;rdquo;&lt;/p>
&lt;p>}
catch {
Write-Error &amp;ldquo;Failed to Install PSFramework $($_)&amp;rdquo;
}
# Install dbachecks
try {
Write-Output &amp;ldquo;Installing dbatools&amp;rdquo;
Install-Module dbatools -RequiredVersion $dbatoolsVersion -Scope CurrentUser -Force
Write-Output &amp;ldquo;Installed dbatools&amp;rdquo;&lt;/p>
&lt;p>}
catch {
Write-Error &amp;ldquo;Failed to Install dbatools $($_)&amp;rdquo;
}&lt;/p>
&lt;p># Add current folder to PSModulePath
try {
Write-Output &amp;ldquo;Adding local folder to PSModulePath&amp;rdquo;
$ENV:PSModulePath = $ENV:PSModulePath + &amp;ldquo;;$pwd&amp;rdquo;
Write-Output &amp;ldquo;Added local folder to PSModulePath&amp;rdquo;
$ENV:PSModulePath.Split(&amp;rsquo;;&amp;rsquo;)
}
catch {
Write-Error &amp;ldquo;Failed to add $pwd to PSModulePAth - $_&amp;rdquo;
}&lt;/p>
&lt;p>I use the &lt;a class="link" href="https://github.com/PoshCode/Configuration" target="_blank" rel="noopener"
>Configuration module&lt;/a> from &lt;a class="link" href="https://twitter.com/jaykul" target="_blank" rel="noopener"
>Joel Bennett&lt;/a> to get the required module versions for the required modules and then add the path to $ENV:PSModulePath so that the modules will be imported. I think this is because the modules did not import correctly without it.&lt;/p>
&lt;p>Once I have the modules I can then run Pester as follows&lt;/p>
&lt;p>try {
Write-Output &amp;ldquo;Installing dbachecks&amp;rdquo;
Import-Module .\dbachecks.psd1
Write-Output &amp;ldquo;Installed dbachecks&amp;rdquo;&lt;/p>
&lt;p>}
catch {
Write-Error &amp;ldquo;Failed to Install dbachecks $($_)&amp;rdquo;
}
$TestResults = Invoke-Pester .\tests -ExcludeTag Integration,IntegrationTests -Show None -OutputFile $(Build.SourcesDirectory)\Test-Pester.XML -OutputFormat NUnitXml -PassThru&lt;/p>
&lt;p>if ($TestResults.failedCount -ne 0) {
Write-Error &amp;ldquo;Pester returned errors&amp;rdquo;
}&lt;/p>
&lt;p>As you can see I import the dbachecks module from the local folder, run Invoke-Pester and output the results to an XML file and check that there are no failing tests.&lt;/p>
&lt;p>Whether you use the task or PowerShell the next step is to Publish the test results so that they are displayed in the build results in VSTS.&lt;/p>
&lt;p>Click on the + sign next to Phase 1 and search for Publish&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/05/12-publish-test-results.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/05/12-publish-test-results.png"
loading="lazy"
alt="12 - publish test results.png"
>&lt;/a>&lt;/p>
&lt;p>Choose the Publish Test Results task and leave everything as default unless you have renamed the xml file. This means that on the summary page you will see some test results&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/05/13-Test-on-sumary-page.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/05/13-Test-on-sumary-page.png"
loading="lazy"
alt="13 - Test on sumary page.png"
>&lt;/a>&lt;/p>
&lt;p>and on the tests tab you can see more detailed information and drill down into the tests&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/05/14-detailed-test-report.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/05/14-detailed-test-report.png"
loading="lazy"
alt="14 - detailed test report.png"
>&lt;/a>&lt;/p>
&lt;h2 id="trigger">Trigger
&lt;/h2>&lt;p>The next step is to trigger a build when a commit is pushed to the development branch. Click on Triggers and tick enable continuous integration&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/05/15-Trigger.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/05/15-Trigger.png"
loading="lazy"
alt="15 Trigger.png"
>&lt;/a>&lt;/p>
&lt;h2 id="saving-the-build-definition">Saving the Build Definition
&lt;/h2>&lt;p>I would normally save the build definition regularly and ensure that there is a good message in the comment. I always tell clients that this is like a commit message for your build process so that you can see the history of the changes for the build definition.&lt;/p>
&lt;p>You can see the history on the edit tab of the build definition&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/05/16-build-history.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/05/16-build-history.png"
loading="lazy"
alt="16 - build history.png"
>&lt;/a>&lt;/p>
&lt;p>If you want to compare or revert the build definition this can be done using the hamburger menu as shown below.&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/05/17-build-history-compare-revert.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/05/17-build-history-compare-revert.png"
loading="lazy"
alt="17 - build history compare revert.png"
>&lt;/a>&lt;/p>
&lt;h2 id="update-the-module-version">Update the Module Version
&lt;/h2>&lt;p>Now we need to create a build definition for the master branch to update the module version and sign the code ready for publishing to the PowerShell Gallery when we commit or merge to master&lt;/p>
&lt;p>Create a new build definition as above but this time choose the master branch&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/05/18-master-build.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/05/18-master-build.png"
loading="lazy"
alt="18 - master build.png"
>&lt;/a>&lt;/p>
&lt;p>Again choose an empty process and name it sensibly, click the + sign next to Phase 1 and search for PowerShell&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/05/19-PowerShell-task.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/05/19-PowerShell-task.png"
loading="lazy"
alt="19 - PowerShell task.png"
>&lt;/a>&lt;/p>
&lt;p>I change the version to 2 and use this code. Note that the commit message has ***NO_CI*** in it. Putting this in a commit message tells VSTS not to trigger a build for this commit.&lt;/p>
&lt;p>$manifest = Import-PowerShellDataFile .\dbachecks.psd1
[version]$version = $Manifest.ModuleVersion
Write-Output &amp;ldquo;Old Version - $Version&amp;rdquo;
# Add one to the build of the version number
[version]$NewVersion = &amp;ldquo;{0}.{1}.{2}&amp;rdquo; -f $Version.Major, $Version.Minor, ($Version.Build + 1)
Write-Output &amp;ldquo;New Version - $NewVersion&amp;rdquo;
# Update the manifest file
try {
Write-Output &amp;ldquo;Updating the Module Version to $NewVersion&amp;rdquo;
$path = &amp;ldquo;$pwd\dbachecks.psd1&amp;rdquo;
(Get-Content .\dbachecks.psd1) -replace $version, $NewVersion | Set-Content .\dbachecks.psd1 -Encoding string
Write-Output &amp;ldquo;Updated the Module Version to $NewVersion&amp;rdquo;
}
catch {
Write-Error &amp;ldquo;Failed to update the Module Version - $_&amp;rdquo;
}&lt;/p>
&lt;p>try {
Write-Output &amp;ldquo;Updating GitHub&amp;rdquo;
git config user.email &amp;ldquo;&lt;a class="link" href="mailto:mrrobsewell@outlook.com" >mrrobsewell@outlook.com&lt;/a>&amp;rdquo;
git config user.name &amp;ldquo;SQLDBAWithABeard&amp;rdquo;
git add .\dbachecks.psd1
git commit -m &amp;ldquo;Updated Version Number to $NewVersion ***NO_CI***&amp;rdquo;&lt;/p>
&lt;p>git push https://$(RobsGitHubPAT)@github.com/dataplat/dbachecks.git HEAD:master
Write-Output &amp;ldquo;Updated GitHub &amp;quot;&lt;/p>
&lt;p>}
catch {
$_ | Fl -Force
Write-Output &amp;ldquo;Failed to update GitHub&amp;rdquo;
}&lt;/p>
&lt;p>I use Get-Content Set-Content as I had errors with the Update-ModuleManifest but Adam Murray &lt;a class="link" href="https://github.com/muzzar78" target="_blank" rel="noopener"
>g&lt;/a> | &lt;a class="link" href="https://twitter.com/muzzar78" target="_blank" rel="noopener"
>t&lt;/a> uses this code to update the version using the BuildID from VSTS&lt;/p>
&lt;p>$newVersion = New-Object version -ArgumentList 1, 0, 0, $env:BUILD_BUILDID
$Public = @(Get-ChildItem -Path $ModulePath\Public\*.ps1)
$Functions = $public.basename
Update-ModuleManifest -Path $ModulePath\$ModuleName.psd1 -ModuleVersion $newVersion -FunctionsToExport $Functions&lt;/p>
&lt;p>You can commit your change by adding your PAT token as a variable under the variables tab. Don’t forget to tick the padlock to make it a secret so it is not displayed in the logs&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/05/20-variables.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/05/20-variables.png"
loading="lazy"
alt="20 - variables.png"
>&lt;/a>&lt;/p>
&lt;h2 id="sign-the-code-with-a-certificate">Sign the code with a certificate
&lt;/h2>&lt;p>The SQL Collaborative uses a code signing certificate from &lt;a class="link" href="https://digicert.com/" target="_blank" rel="noopener"
>DigiCert&lt;/a> who allow MVPs to use one for free to sign their code for open source projects, Thank You. We had to upload the certificate to the secure files store in the VSTS library. Click on library, secure files and the blue +Secure File button&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/05/21-secure-file-store.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/05/21-secure-file-store.png"
loading="lazy"
alt="21 - secure file store.png"
>&lt;/a>&lt;/p>
&lt;p>You also need to add the password as a variable under the variables tab as above. Again don’t forget to tick the padlock to make it a secret so it is not displayed in the logs&lt;/p>
&lt;p>Then you need to add a task to download the secure file. Click on the + sign next to Phase 1 and search for secure&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/05/22-download-secure-file.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/05/22-download-secure-file.png"
loading="lazy"
alt="22 download secure file.png"
>&lt;/a>&lt;/p>
&lt;p>choose the file from the drop down&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/05/23-download-secure-file.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/05/23-download-secure-file.png"
loading="lazy"
alt="23 - download secure file.png"
>&lt;/a>&lt;/p>
&lt;p>Next we need to import the certificate and sign the code. I use a PowerShell task for this with the following code&lt;/p>
&lt;p>$ErrorActionPreference = &amp;lsquo;Stop&amp;rsquo;
# read in the certificate from a pre-existing PFX file
# I have checked this with @IISResetMe and this does not go in the store only memory
$cert = [System.Security.Cryptography.X509Certificates.X509Certificate2]::new(&amp;quot;$(Agent.WorkFolder)\_temp\dbatools-code-signing-cert.pfx&amp;rdquo;,&amp;quot;$(CertPassword)&amp;quot;)&lt;/p>
&lt;p>try {
Write-Output &amp;ldquo;Signing Files&amp;rdquo;
# find all scripts in your module&amp;hellip;
Get-ChildItem -Filter *.ps1 -Include *.ps1 -Recurse -ErrorAction SilentlyContinue |
# &amp;hellip;that do not have a signature yet&amp;hellip;
Where-Object {
($_ | Get-AuthenticodeSignature).Status -eq &amp;lsquo;NotSigned&amp;rsquo;
} |
# and apply one
# (note that we added -WhatIf so no signing occurs. Remove this only if you
# really want to add digital signatures!)
Set-AuthenticodeSignature -Certificate $cert
Write-Output &amp;ldquo;Signed Files&amp;rdquo;
}
catch {
$_ | Format-List -Force
Write-Error &amp;ldquo;Failed to sign scripts&amp;rdquo;
}&lt;/p>
&lt;p>which will import the certificate into memory and sign all of the scripts in the module folder.&lt;/p>
&lt;h2 id="publish-your-artifact">Publish your artifact
&lt;/h2>&lt;p>The last step of the master branch build publishes the artifact (your signed module) to VSTS ready for the release task. Again, click the + sign next to Phase one and choose the Publish Artifact task not the deprecated copy and publish artifact task and give the artifact a useful name&lt;/p>
&lt;h2 id="24---publish-artifactpng">&lt;a class="link" href="assets/uploads/2018/05/24-publish-artifact.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/05/24-publish-artifact.png"
loading="lazy"
alt="24 - publish artifact.png"
>&lt;/a>
&lt;/h2>&lt;p>Don’t forget to set the trigger for the master build as well following the same steps as the development build above&lt;/p>
&lt;h2 id="publish-to-the-powershell-gallery">Publish to the PowerShell Gallery
&lt;/h2>&lt;p>Next we create a release to trigger when there is an artifact ready and publish to the PowerShell Gallery.&lt;/p>
&lt;p>Click the Releases tab and New Definition&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/05/25-Reelase-creation.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/05/25-Reelase-creation.png"
loading="lazy"
alt="25 - Reelase creation"
>&lt;/a>&lt;/p>
&lt;p>Choose an empty process and name the release definition appropriately&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/05/26-Release-name-empty-process.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/05/26-Release-name-empty-process.png"
loading="lazy"
alt="26 Release name empty process.png"
>&lt;/a>&lt;/p>
&lt;p>Now click on the artifact and choose the master build definition. If you have not run a build you will get an error like below but dont worry click add.&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/05/27-add-artifact.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/05/27-add-artifact.png"
loading="lazy"
alt="27 - add artifact.png"
>&lt;/a>&lt;/p>
&lt;p>Click on the lightning bolt next to the artifact to open the continuous deployment trigger&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/05/28-Choose-lightning-bolt.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/05/28-Choose-lightning-bolt.png"
loading="lazy"
alt="28 - Choose lightning bolt"
>&lt;/a>&lt;/p>
&lt;p>and turn on Continuous Deployment so that when an artifact has been created with an updated module version and signed code it is published to the gallery&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/05/28-Continuous-deployment-trigger.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/05/28-Continuous-deployment-trigger.png"
loading="lazy"
alt="28 - Continuous deployment trigger"
>&lt;/a>&lt;/p>
&lt;p>Next, click on the environment and name it appropriately and then click on the + sign next to Agent Phase and choose a PowerShell step&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/05/29-PowerShell-Publish-step.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/05/29-PowerShell-Publish-step.png"
loading="lazy"
alt="29 - PowerShell Publish step"
>&lt;/a>&lt;/p>
&lt;p>You may wonder why I dont choose the PowerShell Gallery Packager task. There are two reasons. First I need to install the required modules for dbachecks (dbatools, PSFramework, Pester) prior to publishing and second it appears that the API Key is stored in plain text&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/05/30-PowerShell-Gallery-Publisher.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/05/30-PowerShell-Gallery-Publisher.png"
loading="lazy"
alt="30 - PowerShell Gallery Publisher"
>&lt;/a>&lt;/p>
&lt;p>I save my API key for the PowerShell Gallery as a variable again making sure to tick the padlock to make it a secret&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/05/31-API-Key-variable.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/05/31-API-Key-variable.png"
loading="lazy"
alt="31 - API Key variable.png"
>&lt;/a>&lt;/p>
&lt;p>and then use the following code to install the required modules and publish the module to the gallery&lt;/p>
&lt;p>Install-Module dbatools -Scope CurrentUser -Force
Install-Module Pester -Scope CurrentUser -SkipPublisherCheck -Force
Install-Module PSFramework -Scope CurrentUser -Force&lt;/p>
&lt;p>Publish-Module -Path &amp;ldquo;$(System.DefaultWorkingDirectory)/Master - Version Update, Signing and Publish Artifact/dbachecks&amp;rdquo; -NuGetApiKey &amp;ldquo;$(GalleryApiKey)&amp;rdquo;&lt;/p>
&lt;p>Thats it 🙂&lt;/p>
&lt;p>Now we have a process that will automatically run our Pester tests when we commit or merge to the development branch and then update our module version number and sign our code and publish to the PowerShell Gallery when we commit or merge to the master branch&lt;/p>
&lt;h2 id="added-extra--dashboard">Added Extra – Dashboard
&lt;/h2>&lt;p>I like to create dashboards in VSTS to show the progress of the various definitions. You can do this under the dashboard tab. Click edit and choose or search for widgets and add them to the dashboard&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/05/32-Dashboard.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/05/32-Dashboard.png"
loading="lazy"
alt="32 - Dashboard.png"
>&lt;/a>&lt;/p>
&lt;h2 id="added-extra--badges">Added Extra – Badges
&lt;/h2>&lt;p>You can also enable badges for displaying on your readme in GitHub (or VSTS). For the build defintions this is under the options tab.&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/05/33-Build-badges.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/05/33-Build-badges.png"
loading="lazy"
alt="33 - Build badges"
>&lt;/a>&lt;/p>
&lt;p>for the release definitions, click the environment and then options and integrations&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/05/34-Release-Badge.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/05/34-Release-Badge.png"
loading="lazy"
alt="34 - Release Badge"
>&lt;/a>&lt;/p>
&lt;p>You can then copy the URL and use it in your readme &lt;a class="link" href="https://github.com/dataplat/dbachecks" target="_blank" rel="noopener"
>like this on dbachecks&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/05/35-dbachecks-readme-badges.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/05/35-dbachecks-readme-badges.png"
loading="lazy"
alt="35 - dbachecks readme badges.png"
>&lt;/a>&lt;/p>
&lt;p>The SQL Collaborative has joined the preview of enabling public access to VSTS projects as &lt;a class="link" href="https://blogs.msdn.microsoft.com/devops/2018/04/27/vsts-public-projects-limited-preview/" target="_blank" rel="noopener"
>detailed in this blog post&lt;/a> So you can &lt;a class="link" href="https://dataplat.visualstudio.com/dbachecks/dbachecks%20Team/_build" target="_blank" rel="noopener"
>see the dbachecks build and release without the need to log in&lt;/a> and soon &lt;a class="link" href="https://dataplat.visualstudio.com/dbatools/_build" target="_blank" rel="noopener"
>the dbatools process as well&lt;/a>&lt;/p>
&lt;p>I hope you found this useful and if you have any questions or comments please feel free to contact me&lt;/p>
&lt;p>Happy Automating!&lt;/p></description></item><item><title>Announcing dbachecks – Configurable PowerShell Validation For Your SQL Instances</title><link>https://dbachecks.io/blog/announcing-dbachecks-configurable-powershell-validation-for-your-sql-instances/</link><pubDate>Thu, 22 Feb 2018 00:00:00 +0000</pubDate><guid>https://dbachecks.io/blog/announcing-dbachecks-configurable-powershell-validation-for-your-sql-instances/</guid><description>&lt;img src="https://dbachecks.io/assets/uploads/2018/02/09-PowerBi.png" alt="Featured image of post Announcing dbachecks – Configurable PowerShell Validation For Your SQL Instances" />&lt;p>For the last couple of months members of the &lt;a class="link" href="http://dbatools.io" target="_blank" rel="noopener"
>dbatools&lt;/a> team have been working on a new PowerShell module called &lt;a class="link" href="http://dbachecks.io" target="_blank" rel="noopener"
>dbachecks&lt;/a>. This open source PowerShell module will enable you to validate your SQL Instances. Today it is released for you all to start to use 🙂&lt;/p>
&lt;h2 id="validate-your-sql-instances">Validate Your SQL Instances?
&lt;/h2>&lt;p>What do I mean by validate your SQL Instances? You want to know if your SQL Instances are (still) set up in the way that you want them to be or that you have not missed any configurations when setting them up. With dbachecks you can use any or all of the 80 checks to ensure one or many SQL Instances are as you want them to be. Using Pester, dbachecks will validate your SQL Instance(s) against default settings or ones that you configure yourself.&lt;/p>
&lt;h2 id="installation">Installation
&lt;/h2>&lt;p>Installation is via the PowerShell Gallery. You will need to open PowerShell on a machine connected to the internet and run&lt;/p>
&lt;p>Install-Module dbachecks&lt;/p>
&lt;p>If you are not running your process as admin or you only want (or are able) to install for your own user account you will need to&lt;/p>
&lt;p>Install-Module -Scope CurrentUser&lt;/p>
&lt;p>This will also install the PSFramework module used for configuration (and other things beneath the hood) and the latest version (4.2.0 – released on Sunday!) of Pester&lt;/p>
&lt;p>Once you have installed the module you can see the commands available by running&lt;/p>
&lt;p>Get-Command -Module dbachecks&lt;/p>
&lt;p>To be able to use these (and any PowerShell) commands, your first step should always be Get-Help&lt;/p>
&lt;p>Get-Help Send-DbcMailMessage&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/02/01a-get-help.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/02/01a-get-help.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;h2 id="80-checks">80 Checks
&lt;/h2>&lt;p>At the time of release, dbachecks has 80 checks. You can see all of the checks by running&lt;/p>
&lt;p>Get-DbcCheck&lt;/p>
&lt;p>(Note this has nothing to do with DBCC CheckDb!) Here is the output of&lt;/p>
&lt;p>Get-DbcCheck | Select Group, UniqueTag&lt;/p>
&lt;p>so you can see the current checks&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>Group&lt;/strong>&lt;/th>
&lt;th>&lt;strong>UniqueTag&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>Agent&lt;/strong>&lt;/td>
&lt;td>AgentServiceAccount&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Agent&lt;/strong>&lt;/td>
&lt;td>DbaOperator&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Agent&lt;/strong>&lt;/td>
&lt;td>FailsafeOperator&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Agent&lt;/strong>&lt;/td>
&lt;td>DatabaseMailProfile&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Agent&lt;/strong>&lt;/td>
&lt;td>FailedJob&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Database&lt;/strong>&lt;/td>
&lt;td>DatabaseCollation&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Database&lt;/strong>&lt;/td>
&lt;td>SuspectPage&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Database&lt;/strong>&lt;/td>
&lt;td>TestLastBackup&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Database&lt;/strong>&lt;/td>
&lt;td>TestLastBackupVerifyOnly&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Database&lt;/strong>&lt;/td>
&lt;td>ValidDatabaseOwner&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Database&lt;/strong>&lt;/td>
&lt;td>InvalidDatabaseOwner&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Database&lt;/strong>&lt;/td>
&lt;td>LastGoodCheckDb&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Database&lt;/strong>&lt;/td>
&lt;td>IdentityUsage&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Database&lt;/strong>&lt;/td>
&lt;td>RecoveryModel&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Database&lt;/strong>&lt;/td>
&lt;td>DuplicateIndex&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Database&lt;/strong>&lt;/td>
&lt;td>UnusedIndex&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Database&lt;/strong>&lt;/td>
&lt;td>DisabledIndex&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Database&lt;/strong>&lt;/td>
&lt;td>DatabaseGrowthEvent&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Database&lt;/strong>&lt;/td>
&lt;td>PageVerify&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Database&lt;/strong>&lt;/td>
&lt;td>AutoClose&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Database&lt;/strong>&lt;/td>
&lt;td>AutoShrink&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Database&lt;/strong>&lt;/td>
&lt;td>LastFullBackup&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Database&lt;/strong>&lt;/td>
&lt;td>LastDiffBackup&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Database&lt;/strong>&lt;/td>
&lt;td>LastLogBackup&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Database&lt;/strong>&lt;/td>
&lt;td>VirtualLogFile&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Database&lt;/strong>&lt;/td>
&lt;td>LogfileCount&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Database&lt;/strong>&lt;/td>
&lt;td>LogfileSize&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Database&lt;/strong>&lt;/td>
&lt;td>FileGroupBalanced&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Database&lt;/strong>&lt;/td>
&lt;td>AutoCreateStatistics&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Database&lt;/strong>&lt;/td>
&lt;td>AutoUpdateStatistics&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Database&lt;/strong>&lt;/td>
&lt;td>AutoUpdateStatisticsAsynchronously&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Database&lt;/strong>&lt;/td>
&lt;td>DatafileAutoGrowthType&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Database&lt;/strong>&lt;/td>
&lt;td>Trustworthy&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Database&lt;/strong>&lt;/td>
&lt;td>OrphanedUser&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Database&lt;/strong>&lt;/td>
&lt;td>PseudoSimple&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Database&lt;/strong>&lt;/td>
&lt;td>AdHocWorkloads&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Domain&lt;/strong>&lt;/td>
&lt;td>DomainName&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Domain&lt;/strong>&lt;/td>
&lt;td>OrganizationalUnit&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>HADR&lt;/strong>&lt;/td>
&lt;td>ClusterHealth&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>HADR&lt;/strong>&lt;/td>
&lt;td>ClusterServerHealth&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>HADR&lt;/strong>&lt;/td>
&lt;td>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>HADR&lt;/strong>&lt;/td>
&lt;td>System.Object[]&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Instance&lt;/strong>&lt;/td>
&lt;td>SqlEngineServiceAccount&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Instance&lt;/strong>&lt;/td>
&lt;td>SqlBrowserServiceAccount&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Instance&lt;/strong>&lt;/td>
&lt;td>TempDbConfiguration&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Instance&lt;/strong>&lt;/td>
&lt;td>AdHocWorkload&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Instance&lt;/strong>&lt;/td>
&lt;td>BackupPathAccess&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Instance&lt;/strong>&lt;/td>
&lt;td>DAC&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Instance&lt;/strong>&lt;/td>
&lt;td>NetworkLatency&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Instance&lt;/strong>&lt;/td>
&lt;td>LinkedServerConnection&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Instance&lt;/strong>&lt;/td>
&lt;td>MaxMemory&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Instance&lt;/strong>&lt;/td>
&lt;td>OrphanedFile&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Instance&lt;/strong>&lt;/td>
&lt;td>ServerNameMatch&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Instance&lt;/strong>&lt;/td>
&lt;td>MemoryDump&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Instance&lt;/strong>&lt;/td>
&lt;td>SupportedBuild&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Instance&lt;/strong>&lt;/td>
&lt;td>SaRenamed&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Instance&lt;/strong>&lt;/td>
&lt;td>DefaultBackupCompression&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Instance&lt;/strong>&lt;/td>
&lt;td>XESessionStopped&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Instance&lt;/strong>&lt;/td>
&lt;td>XESessionRunning&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Instance&lt;/strong>&lt;/td>
&lt;td>XESessionRunningAllowed&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Instance&lt;/strong>&lt;/td>
&lt;td>OLEAutomation&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Instance&lt;/strong>&lt;/td>
&lt;td>WhoIsActiveInstalled&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>LogShipping&lt;/strong>&lt;/td>
&lt;td>LogShippingPrimary&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>LogShipping&lt;/strong>&lt;/td>
&lt;td>LogShippingSecondary&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Server&lt;/strong>&lt;/td>
&lt;td>PowerPlan&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Server&lt;/strong>&lt;/td>
&lt;td>InstanceConnection&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Server&lt;/strong>&lt;/td>
&lt;td>SPN&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Server&lt;/strong>&lt;/td>
&lt;td>DiskCapacity&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>Server&lt;/strong>&lt;/td>
&lt;td>PingComputer&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>MaintenancePlan&lt;/strong>&lt;/td>
&lt;td>SystemFull&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>MaintenancePlan&lt;/strong>&lt;/td>
&lt;td>UserFull&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>MaintenancePlan&lt;/strong>&lt;/td>
&lt;td>UserDiff&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>MaintenancePlan&lt;/strong>&lt;/td>
&lt;td>UserLog&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>MaintenancePlan&lt;/strong>&lt;/td>
&lt;td>CommandLog&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>MaintenancePlan&lt;/strong>&lt;/td>
&lt;td>SystemIntegrityCheck&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>MaintenancePlan&lt;/strong>&lt;/td>
&lt;td>UserIntegrityCheck&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>MaintenancePlan&lt;/strong>&lt;/td>
&lt;td>UserIndexOptimize&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>MaintenancePlan&lt;/strong>&lt;/td>
&lt;td>OutputFileCleanup&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>MaintenancePlan&lt;/strong>&lt;/td>
&lt;td>DeleteBackupHistory&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>MaintenancePlan&lt;/strong>&lt;/td>
&lt;td>PurgeJobHistory&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="108-configurations">108 Configurations
&lt;/h2>&lt;p>One of the things I have been talking about in my presentation “Green is Good Red is Bad” is configuring Pester checks so that you do not have to keep writing new tests for the same thing but with different values.&lt;/p>
&lt;p>For example, a different user for a database owner. The code to write the test for the database owner is the same but the value might be different for different applications, environments, clients, teams, domains etc. I gave a couple of different methods for achieving this.&lt;/p>
&lt;p>With dbachecks we have made this much simpler enabling you to set configuration items at run-time or for your session and enabling you to export and import them so you can create different configs for different use cases&lt;/p>
&lt;p>There are 108 configuration items at present. You can see the current configuration by running&lt;/p>
&lt;p>Get-DbcConfig&lt;/p>
&lt;p>which will show you the name of the config, the value it is currently set and the description&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/02/01-configs.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/02/01-configs.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>You can see all of the configs and their descriptions here&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>Name&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Description&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>agent.databasemailprofile&lt;/strong>&lt;/td>
&lt;td>Name of the Database Mail Profile in SQL Agent&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>agent.dbaoperatoremail&lt;/strong>&lt;/td>
&lt;td>Email address of the DBA Operator in SQL Agent&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>agent.dbaoperatorname&lt;/strong>&lt;/td>
&lt;td>Name of the DBA Operator in SQL Agent&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>agent.failsafeoperator&lt;/strong>&lt;/td>
&lt;td>Email address of the DBA Operator in SQL Agent&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>app.checkrepos&lt;/strong>&lt;/td>
&lt;td>Where Pester tests/checks are stored&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>app.computername&lt;/strong>&lt;/td>
&lt;td>List of Windows Servers that Windows-based tests will run against&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>app.localapp&lt;/strong>&lt;/td>
&lt;td>Persisted files live here&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>app.maildirectory&lt;/strong>&lt;/td>
&lt;td>Files for mail are stored here&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>app.sqlcredential&lt;/strong>&lt;/td>
&lt;td>The universal SQL credential if Trusted/Windows Authentication is not used&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>app.sqlinstance&lt;/strong>&lt;/td>
&lt;td>List of SQL Server instances that SQL-based tests will run against&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>app.wincredential&lt;/strong>&lt;/td>
&lt;td>The universal Windows if default Windows Authentication is not used&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>command.invokedbccheck.excludecheck&lt;/strong>&lt;/td>
&lt;td>Invoke-DbcCheck: The checks that should be skipped by default.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>domain.domaincontroller&lt;/strong>&lt;/td>
&lt;td>The domain controller to process your requests&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>domain.name&lt;/strong>&lt;/td>
&lt;td>The Active Directory domain that your server is a part of&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>domain.organizationalunit&lt;/strong>&lt;/td>
&lt;td>The OU that your server should be a part of&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>mail.failurethreshhold&lt;/strong>&lt;/td>
&lt;td>Number of errors that must be present to generate an email report&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>mail.from&lt;/strong>&lt;/td>
&lt;td>Email address the email reports should come from&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>mail.smtpserver&lt;/strong>&lt;/td>
&lt;td>Store the name of the smtp server to send email reports&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>mail.subject&lt;/strong>&lt;/td>
&lt;td>Subject line of the email report&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>mail.to&lt;/strong>&lt;/td>
&lt;td>Email address to send the report to&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.backup.datadir&lt;/strong>&lt;/td>
&lt;td>Destination server data directory&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.backup.defaultbackupcompreesion&lt;/strong>&lt;/td>
&lt;td>Default Backup Compression check should be enabled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.backup.diffmaxhours&lt;/strong>&lt;/td>
&lt;td>Maxmimum number of hours before Diff Backups are considered outdated&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.backup.fullmaxdays&lt;/strong>&lt;/td>
&lt;td>Maxmimum number of days before Full Backups are considered outdated&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.backup.logdir&lt;/strong>&lt;/td>
&lt;td>Destination server log directory&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.backup.logmaxminutes&lt;/strong>&lt;/td>
&lt;td>Maxmimum number of minutes before Log Backups are considered outdated&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.backup.newdbgraceperiod&lt;/strong>&lt;/td>
&lt;td>The number of hours a newly created database is allowed to not have backups&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.backup.testserver&lt;/strong>&lt;/td>
&lt;td>Destination server for backuptests&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.build.warningwindow&lt;/strong>&lt;/td>
&lt;td>The number of months prior to a build being unsupported that you want warning about&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.connection.authscheme&lt;/strong>&lt;/td>
&lt;td>Auth requirement (Kerberos, NTLM, etc)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.connection.pingcount&lt;/strong>&lt;/td>
&lt;td>Number of times to ping a server to establish average response time&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.connection.pingmaxms&lt;/strong>&lt;/td>
&lt;td>Maximum response time in ms&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.dacallowed&lt;/strong>&lt;/td>
&lt;td>DAC should be allowed $true or disallowed $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.database.autoclose&lt;/strong>&lt;/td>
&lt;td>Auto Close should be allowed $true or dissalowed $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.database.autocreatestatistics&lt;/strong>&lt;/td>
&lt;td>Auto Create Statistics should be enabled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.database.autoshrink&lt;/strong>&lt;/td>
&lt;td>Auto Shrink should be allowed $true or dissalowed $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.database.autoupdatestatistics&lt;/strong>&lt;/td>
&lt;td>Auto Update Statistics should be enabled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.database.autoupdatestatisticsasynchronously&lt;/strong>&lt;/td>
&lt;td>Auto Update Statistics Asynchronously should be enabled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.database.filebalancetolerance&lt;/strong>&lt;/td>
&lt;td>Percentage for Tolerance for checking for balanced files in a filegroups&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.database.filegrowthexcludedb&lt;/strong>&lt;/td>
&lt;td>Databases to exclude from the file growth check&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.database.filegrowthtype&lt;/strong>&lt;/td>
&lt;td>Growth Type should be &amp;lsquo;kb&amp;rsquo; or &amp;lsquo;percent&amp;rsquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.database.filegrowthvalue&lt;/strong>&lt;/td>
&lt;td>The auto growth value (in kb) should be equal or higher than this value. Example: A value of 65535 means at least 64MB.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.database.logfilecount&lt;/strong>&lt;/td>
&lt;td>The number of Log files expected on a database&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.database.logfilesizecomparison&lt;/strong>&lt;/td>
&lt;td>How to compare data and log file size, options are maximum or average&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.database.logfilesizepercentage&lt;/strong>&lt;/td>
&lt;td>Maximum percentage of Data file Size that logfile is allowed to be.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.database.maxvlf&lt;/strong>&lt;/td>
&lt;td>Max virtual log files&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.dbcc.maxdays&lt;/strong>&lt;/td>
&lt;td>Maxmimum number of days before DBCC CHECKDB is considered outdated&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.diskspace.percentfree&lt;/strong>&lt;/td>
&lt;td>Percent disk free&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.dump.maxcount&lt;/strong>&lt;/td>
&lt;td>Maximum number of expected dumps&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.hadr.tcpport&lt;/strong>&lt;/td>
&lt;td>The TCPPort for the HADR check&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.identity.usagepercent&lt;/strong>&lt;/td>
&lt;td>Maxmimum percentage of max of identity column&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.invaliddbowner.excludedb&lt;/strong>&lt;/td>
&lt;td>Databases to exclude from invalid dbowner checks&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.invaliddbowner.name&lt;/strong>&lt;/td>
&lt;td>The database owner account should not be this user&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.network.latencymaxms&lt;/strong>&lt;/td>
&lt;td>Max network latency average&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.commandlogenabled&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s CommandLog Cleanup should be enabled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.commandlogscheduled&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s CommandLog Cleanup should be scheduled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.database&lt;/strong>&lt;/td>
&lt;td>The database where Ola&amp;rsquo;s maintenance solution is installed&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.deletebackuphistoryenabled&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s Delete Backup History should be enabled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.deletebackuphistoryscheduled&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s Delete Backup History should be scheduled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.installed&lt;/strong>&lt;/td>
&lt;td>Checks to see if Ola Hallengren solution is installed&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.outputfilecleanupenabled&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s Output File Cleanup should be enabled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.outputfilecleanupscheduled&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s Output File Cleanup should be scheduled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.purgejobhistoryenabled&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s Purge Job History should be enabled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.purgejobhistoryscheduled&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s Purge Job History should be scheduled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.systemfullenabled&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s Full System Database Backup should be enabled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.systemfullretention&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s Full System Database Backup retention number of hours&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.systemfullscheduled&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s Full System Database Backup should be scheduled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.systemintegritycheckenabled&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s System Database Integrity should be enabled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.systemintegritycheckscheduled&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s System Database Integrity should be scheduled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.userdiffenabled&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s Diff User Database Backup should be enabled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.userdiffretention&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s Diff User Database Backup retention number of hours&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.userdiffscheduled&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s Diff User Database Backup should be scheduled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.userfullenabled&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s Full User Database Backup should be enabled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.userfullretention&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s Full User Database Backup retention number of hours&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.userfullscheduled&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s Full User Database Backup should be scheduled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.userindexoptimizeenabled&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s User Index Optimization should be enabled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.userindexoptimizescheduled&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s User Index Optimization should be scheduled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.userintegritycheckenabled&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s User Database Integrity should be enabled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.userintegritycheckscheduled&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s User Database Integrity should be scheduled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.userlogenabled&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s Log User Database Backup should be enabled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.userlogretention&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s Log User Database Backup retention number of hours&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.userlogscheduled&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s Log User Database Backup should be scheduled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.oleautomation&lt;/strong>&lt;/td>
&lt;td>OLE Automation should be enabled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.pageverify&lt;/strong>&lt;/td>
&lt;td>Page verify option should be set to this value&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.recoverymodel.excludedb&lt;/strong>&lt;/td>
&lt;td>Databases to exclude from standard recovery model check&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.recoverymodel.type&lt;/strong>&lt;/td>
&lt;td>Standard recovery model&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.storage.backuppath&lt;/strong>&lt;/td>
&lt;td>Enables tests to check if servers have access to centralized backup location&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.validdbowner.excludedb&lt;/strong>&lt;/td>
&lt;td>Databases to exclude from valid dbowner checks&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.validdbowner.name&lt;/strong>&lt;/td>
&lt;td>The database owner account should be this user&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.whoisactive.database&lt;/strong>&lt;/td>
&lt;td>Which database should contain the sp_WhoIsActive stored procedure&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.xevent.requiredrunningsession&lt;/strong>&lt;/td>
&lt;td>List of XE Sessions that should be running.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.xevent.requiredstoppedsession&lt;/strong>&lt;/td>
&lt;td>List of XE Sessions that should not be running.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.xevent.validrunningsession&lt;/strong>&lt;/td>
&lt;td>List of XE Sessions that can be be running.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>skip.backup.testing&lt;/strong>&lt;/td>
&lt;td>Don&amp;rsquo;t run Test-DbaLastBackup by default (it&amp;rsquo;s not read-only)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>skip.connection.ping&lt;/strong>&lt;/td>
&lt;td>Skip the ping check for connectivity&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>skip.connection.remoting&lt;/strong>&lt;/td>
&lt;td>Skip PowerShell remoting check for connectivity&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>skip.database.filegrowthdisabled&lt;/strong>&lt;/td>
&lt;td>Skip validation of datafiles which have growth value equal to zero.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>skip.database.logfilecounttest&lt;/strong>&lt;/td>
&lt;td>Skip the logfilecount test&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>skip.datafilegrowthdisabled&lt;/strong>&lt;/td>
&lt;td>Skip validation of datafiles which have growth value equal to zero.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>skip.dbcc.datapuritycheck&lt;/strong>&lt;/td>
&lt;td>Skip data purity check in last good dbcc command&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>skip.diffbackuptest&lt;/strong>&lt;/td>
&lt;td>Skip the Differential backup test&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>skip.logfilecounttest&lt;/strong>&lt;/td>
&lt;td>Skip the logfilecount test&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>skip.logshiptesting&lt;/strong>&lt;/td>
&lt;td>Skip the logshipping test&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>skip.tempdb1118&lt;/strong>&lt;/td>
&lt;td>Don&amp;rsquo;t run test for Trace Flag 1118&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>skip.tempdbfilecount&lt;/strong>&lt;/td>
&lt;td>Don&amp;rsquo;t run test for Temp Database File Count&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>skip.tempdbfilegrowthpercent&lt;/strong>&lt;/td>
&lt;td>Don&amp;rsquo;t run test for Temp Database File Growth in Percent&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>skip.tempdbfilesizemax&lt;/strong>&lt;/td>
&lt;td>Don&amp;rsquo;t run test for Temp Database Files Max Size&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>skip.tempdbfilesonc&lt;/strong>&lt;/td>
&lt;td>Don&amp;rsquo;t run test for Temp Database Files on C&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="running-a-check">Running A Check
&lt;/h2>&lt;p>You can quickly run a single check by calling Invoke-DbcCheck.&lt;/p>
&lt;p>Invoke-DbcCheck -SqlInstance localhost -Check FailedJob&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/02/02-failed-jobs.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/02/02-failed-jobs.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>Excellent, my agent jobs have not failed 🙂&lt;/p>
&lt;p>Invoke-DbcCheck -SqlInstance localhost -Check LastGoodCheckDb&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/02/03-dbcc-check.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/02/03-dbcc-check.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>Thats good, all of my databases have had a successful DBCC CHECKDB within the last 7 days.&lt;/p>
&lt;h2 id="setting-a-configuration">Setting a Configuration
&lt;/h2>&lt;p>To save me from having to specify the instance I want to run my tests against I can set the app.sqlinstance config to the instances I want to check.&lt;/p>
&lt;p>Set-DbcConfig -Name app.sqlinstance -Value localhost, &amp;rsquo;localhost\PROD1&amp;rsquo;&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/02/04-setting-instances-config.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/02/04-setting-instances-config.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>Then whenever I call Invoke-DbcCheck it will run against those instances for the SQL checks&lt;/p>
&lt;p>So now if I run&lt;/p>
&lt;p>Invoke-DbcCheck -Check LastDiffBackup&lt;/p>
&lt;p>I can see that I dont have a diff backup for the databases on both instances. Better stop writing this and deal with that !!&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/02/05-last-backup.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/02/05-last-backup.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>The configurations are stored in the registry but you can export them and then import them for re-use easily. I have written another blog post about that.&lt;/p>
&lt;h2 id="the-show-parameter">The Show Parameter
&lt;/h2>&lt;p>Getting the results of the tests on the screen is cool but if you are running a lot of tests against a lot of instances then you might find that you have 3 failed tests out of 15000! This will mean a lot of scrolling through green text looking for the red text and you may find that your PowerShell buffer doesnt hold all of your test results leaving you very frustrated.&lt;/p>
&lt;p>dbachecks supports the Pester Show parameter enabling you to filter the output of the results to the screen. The available values are Summary, None, Fails, Inconclusive, Passed, Pending and Skipped&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/02/06-show.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/02/06-show.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>in my opinion by far the most useful one is Fails as this will show you only the failed tests with the context to enable you to see which tests have failed&lt;/p>
&lt;p>Invoke-DbcCheck -Check Agent -Show Fails&lt;/p>
&lt;p>If we check all of the checks tagged as Agent we can easily see that most passed but The Job That Fails (surprisingly) failed. All of the other tests that were run for the agent service, operators, failsafe operator, database mail and all other agent jobs all passed in the example below&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/02/07-Jobs-that-filed.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/02/07-Jobs-that-filed.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;h2 id="test-results-are-for-other-people-as-well">Test Results are for other People as well
&lt;/h2>&lt;p>It is all very well and good being able to run tests and get the results on our screen. It will be very useful for people to be able to validate a new SQL instance for example or run a morning check or the first step of an incident response. But test results are also useful for other people so we need to be able to share them&lt;/p>
&lt;p>We have created a Power Bi Dashboard that comes with the dbachecks module to enable easy sharing of the test results. You can also send the results via email using Send-DbcMailMessage. we have an &lt;a class="link" href="https://github.com/potatoqualitee/dbachecks/issues/270" target="_blank" rel="noopener"
>open issue for putting them into a database&lt;/a> that we would love you to help resolve.&lt;/p>
&lt;p>To get the results into PowerBi you can run&lt;/p>
&lt;p>Invoke-DbcCheck -AllChecks -Show Fails -PassThru |Update-DbcPowerBiDataSource -Environment Production&lt;/p>
&lt;p>This will run all of the dbachecks using your configuration for your Production environment, output only the failed tests to the screen and save the results in your windows\temp\dbachecks folder with a suffix of Production&lt;/p>
&lt;p>If you then used a different configuration for your development environment and ran&lt;/p>
&lt;p>Invoke-DbcCheck -AllChecks -Show Fails -PassThru |Update-DbcPowerBiDataSource -Environment Development&lt;/p>
&lt;p>it will run all of the dbachecks using your configuration for your Development environment, output only the failed tests to the screen and save the results in your windows\temp\dbachecks folder with a suffix of Development and you would end up with two files in the folder&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/02/08-test-results.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/02/08-test-results.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>You can then simply run&lt;/p>
&lt;p>Start-DbcPowerBi&lt;/p>
&lt;p>and as long as you have the (free) Powerbi Desktop then you will see this. You will need to refresh the data to get your test results&lt;/p>
&lt;p>&lt;a class="link" href="assets/uploads/2018/02/09-PowerBi.png" >&lt;img src="https://dbachecks.io/assets/uploads/2018/02/09-PowerBi.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>Of course it is Powerbi so you can publish this report. Here it is so that you can click around and see what it looks like&lt;/p>
&lt;h2 id="its-open-source--we-want-your-ideas-issues-new-code">It’s Open Source – We Want Your Ideas, Issues, New Code
&lt;/h2>&lt;p>dbachecks is open-source &lt;a class="link" href="https://github.com/potatoqualitee/dbachecks" target="_blank" rel="noopener"
>available on GitHub for anyone to contribute&lt;/a>&lt;/p>
&lt;p>We would love you to contribute. Please open issues for new tests, enhancements, bugs. Please fork the repository and add code to improve the module. please give feedback to make this module even more useful&lt;/p>
&lt;p>You can also come in the &lt;a class="link" href="https://sqlps.io/slack" target="_blank" rel="noopener"
>SQL Server Community Slack&lt;/a> and join the dbachecks channel and get advice, make comments or just join in the conversation&lt;/p>
&lt;h2 id="further-reading">Further Reading
&lt;/h2>&lt;p>There are many more introduction blog posts covering different areas at&lt;/p>
&lt;ul>
&lt;li>&lt;a class="link" href="https://dbachecks.io/install" target="_blank" rel="noopener"
>dbachecks.io/install&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="thank-you">Thank You
&lt;/h2>&lt;p>I want to say thank you to all of the people who have enabled dbachecks to get this far. These wonderful people have used their own time to ensure that you have a useful tool available to you for free&lt;/p>
&lt;p>Chrissy Lemaire &lt;a class="link" href="https://twitter.com/cl" target="_blank" rel="noopener"
>@cl&lt;/a>&lt;/p>
&lt;p>Fred Weinmann &lt;a class="link" href="https://twitter.com/FredWeinmann" target="_blank" rel="noopener"
>@FredWeinmann&lt;/a>&lt;/p>
&lt;p>Cláudio Silva &lt;a class="link" href="https://twitter.com/ClaudioESSilva" target="_blank" rel="noopener"
>@ClaudioESSilva&lt;/a>&lt;/p>
&lt;p>Stuart Moore &lt;a class="link" href="https://twitter.com/napalmgram" target="_blank" rel="noopener"
>@napalmgram&lt;/a>&lt;/p>
&lt;p>Shawn Melton &lt;a class="link" href="https://twitter.com/wsmelton" target="_blank" rel="noopener"
>@wsmelton&lt;/a>&lt;/p>
&lt;p>Garry Bargsley &lt;a class="link" href="https://twitter.com/gbargsley" target="_blank" rel="noopener"
>@gbargsley&lt;/a>&lt;/p>
&lt;p>Stephen Bennett &lt;a class="link" href="https://twitter.com/staggerlee011" target="_blank" rel="noopener"
>@staggerlee011&lt;/a>&lt;/p>
&lt;p>Sander Stad &lt;a class="link" href="https://twitter.com/sqlstad" target="_blank" rel="noopener"
>@SQLStad&lt;/a>&lt;/p>
&lt;p>Jess Pomfret &lt;a class="link" href="https://twitter.com/jpomfret" target="_blank" rel="noopener"
>@jpomfret&lt;/a>&lt;/p>
&lt;p>Jason Squires &lt;a class="link" href="https://twitter.com/js0505" target="_blank" rel="noopener"
>@js0505&lt;/a>&lt;/p>
&lt;p>Shane O’Neill &lt;a class="link" href="https://twitter.com/SOZDBA" target="_blank" rel="noopener"
>@SOZDBA&lt;/a>&lt;/p>
&lt;p>Tony Wilhelm &lt;a class="link" href="https://twitter.com/TonyWSQL" target="_blank" rel="noopener"
>@TonyWSQL&lt;/a>&lt;/p>
&lt;p>and all of the other people who have contributed in the dbachecks Slack channel&lt;/p></description></item><item><title>dbachecks – Configuration Deep Dive</title><link>https://dbachecks.io/blog/dbachecks-configuration-deep-dive/</link><pubDate>Thu, 22 Feb 2018 00:00:00 +0000</pubDate><guid>https://dbachecks.io/blog/dbachecks-configuration-deep-dive/</guid><description>&lt;img src="https://dbachecks.io/assets/uploads/2018/02/03-autocomplete.png" alt="Featured image of post dbachecks – Configuration Deep Dive" />&lt;p>Today is the day that &lt;a class="link" href="https://dbachecks.io/?p=8997" >we have announced dbachecks&lt;/a>  a PowerShell module enabling you to validate your SQL Instances. You can read more about it &lt;a class="link" href="https://dbachecks.io/?p=8997" >here where you can learn how to install it and see some simple use cases&lt;/a>&lt;/p>
&lt;h2 id="108-configurations">108 Configurations
&lt;/h2>&lt;p>One of the things I have been talking about &lt;a class="link" href="https://dbachecks.io/write-your-first-pester-test-today/" >in my presentation “Green is Good Red is Bad”&lt;/a> is configuring Pester checks so that you do not have to keep writing new tests for the same thing but with different values.&lt;/p>
&lt;p>For example, a different user for a database owner. The code to write the test for the database owner is the same but the value might be different for different applications, environments, clients, teams, domains etc. I gave a couple of different methods for achieving this.&lt;/p>
&lt;p>With dbachecks we have made this much simpler enabling you to set configuration items at run-time or for your session and enabling you to export and import them so you can create different configs for different use cases&lt;/p>
&lt;p>There are 108 configuration items at present. You can see the current configuration by running&lt;/p>
&lt;p>Get-DbcConfig&lt;/p>
&lt;p>which will show you the name of the config, the value it is currently set and the description
&lt;img src="https://dbachecks.io/assets/uploads/2018/02/01-configs.png"
loading="lazy"
>&lt;/p>
&lt;p>You can see all of the configs and their descriptions here&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>&lt;strong>Name&lt;/strong>&lt;/th>
&lt;th>&lt;strong>Description&lt;/strong>&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;strong>agent.databasemailprofile&lt;/strong>&lt;/td>
&lt;td>Name of the Database Mail Profile in SQL Agent&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>agent.dbaoperatoremail&lt;/strong>&lt;/td>
&lt;td>Email address of the DBA Operator in SQL Agent&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>agent.dbaoperatorname&lt;/strong>&lt;/td>
&lt;td>Name of the DBA Operator in SQL Agent&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>agent.failsafeoperator&lt;/strong>&lt;/td>
&lt;td>Email address of the DBA Operator in SQL Agent&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>app.checkrepos&lt;/strong>&lt;/td>
&lt;td>Where Pester tests/checks are stored&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>app.computername&lt;/strong>&lt;/td>
&lt;td>List of Windows Servers that Windows-based tests will run against&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>app.localapp&lt;/strong>&lt;/td>
&lt;td>Persisted files live here&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>app.maildirectory&lt;/strong>&lt;/td>
&lt;td>Files for mail are stored here&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>app.sqlcredential&lt;/strong>&lt;/td>
&lt;td>The universal SQL credential if Trusted/Windows Authentication is not used&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>app.sqlinstance&lt;/strong>&lt;/td>
&lt;td>List of SQL Server instances that SQL-based tests will run against&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>app.wincredential&lt;/strong>&lt;/td>
&lt;td>The universal Windows if default Windows Authentication is not used&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>command.invokedbccheck.excludecheck&lt;/strong>&lt;/td>
&lt;td>Invoke-DbcCheck: The checks that should be skipped by default.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>domain.domaincontroller&lt;/strong>&lt;/td>
&lt;td>The domain controller to process your requests&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>domain.name&lt;/strong>&lt;/td>
&lt;td>The Active Directory domain that your server is a part of&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>domain.organizationalunit&lt;/strong>&lt;/td>
&lt;td>The OU that your server should be a part of&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>mail.failurethreshhold&lt;/strong>&lt;/td>
&lt;td>Number of errors that must be present to generate an email report&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>mail.from&lt;/strong>&lt;/td>
&lt;td>Email address the email reports should come from&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>mail.smtpserver&lt;/strong>&lt;/td>
&lt;td>Store the name of the smtp server to send email reports&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>mail.subject&lt;/strong>&lt;/td>
&lt;td>Subject line of the email report&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>mail.to&lt;/strong>&lt;/td>
&lt;td>Email address to send the report to&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.backup.datadir&lt;/strong>&lt;/td>
&lt;td>Destination server data directory&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.backup.defaultbackupcompreesion&lt;/strong>&lt;/td>
&lt;td>Default Backup Compression check should be enabled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.backup.diffmaxhours&lt;/strong>&lt;/td>
&lt;td>Maxmimum number of hours before Diff Backups are considered outdated&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.backup.fullmaxdays&lt;/strong>&lt;/td>
&lt;td>Maxmimum number of days before Full Backups are considered outdated&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.backup.logdir&lt;/strong>&lt;/td>
&lt;td>Destination server log directory&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.backup.logmaxminutes&lt;/strong>&lt;/td>
&lt;td>Maxmimum number of minutes before Log Backups are considered outdated&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.backup.newdbgraceperiod&lt;/strong>&lt;/td>
&lt;td>The number of hours a newly created database is allowed to not have backups&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.backup.testserver&lt;/strong>&lt;/td>
&lt;td>Destination server for backuptests&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.build.warningwindow&lt;/strong>&lt;/td>
&lt;td>The number of months prior to a build being unsupported that you want warning about&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.connection.authscheme&lt;/strong>&lt;/td>
&lt;td>Auth requirement (Kerberos, NTLM, etc)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.connection.pingcount&lt;/strong>&lt;/td>
&lt;td>Number of times to ping a server to establish average response time&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.connection.pingmaxms&lt;/strong>&lt;/td>
&lt;td>Maximum response time in ms&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.dacallowed&lt;/strong>&lt;/td>
&lt;td>DAC should be allowed $true or disallowed $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.database.autoclose&lt;/strong>&lt;/td>
&lt;td>Auto Close should be allowed $true or dissalowed $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.database.autocreatestatistics&lt;/strong>&lt;/td>
&lt;td>Auto Create Statistics should be enabled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.database.autoshrink&lt;/strong>&lt;/td>
&lt;td>Auto Shrink should be allowed $true or dissalowed $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.database.autoupdatestatistics&lt;/strong>&lt;/td>
&lt;td>Auto Update Statistics should be enabled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.database.autoupdatestatisticsasynchronously&lt;/strong>&lt;/td>
&lt;td>Auto Update Statistics Asynchronously should be enabled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.database.filebalancetolerance&lt;/strong>&lt;/td>
&lt;td>Percentage for Tolerance for checking for balanced files in a filegroups&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.database.filegrowthexcludedb&lt;/strong>&lt;/td>
&lt;td>Databases to exclude from the file growth check&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.database.filegrowthtype&lt;/strong>&lt;/td>
&lt;td>Growth Type should be &amp;lsquo;kb&amp;rsquo; or &amp;lsquo;percent&amp;rsquo;&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.database.filegrowthvalue&lt;/strong>&lt;/td>
&lt;td>The auto growth value (in kb) should be equal or higher than this value. Example: A value of 65535 means at least 64MB.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.database.logfilecount&lt;/strong>&lt;/td>
&lt;td>The number of Log files expected on a database&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.database.logfilesizecomparison&lt;/strong>&lt;/td>
&lt;td>How to compare data and log file size, options are maximum or average&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.database.logfilesizepercentage&lt;/strong>&lt;/td>
&lt;td>Maximum percentage of Data file Size that logfile is allowed to be.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.database.maxvlf&lt;/strong>&lt;/td>
&lt;td>Max virtual log files&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.dbcc.maxdays&lt;/strong>&lt;/td>
&lt;td>Maxmimum number of days before DBCC CHECKDB is considered outdated&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.diskspace.percentfree&lt;/strong>&lt;/td>
&lt;td>Percent disk free&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.dump.maxcount&lt;/strong>&lt;/td>
&lt;td>Maximum number of expected dumps&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.hadr.tcpport&lt;/strong>&lt;/td>
&lt;td>The TCPPort for the HADR check&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.identity.usagepercent&lt;/strong>&lt;/td>
&lt;td>Maxmimum percentage of max of identity column&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.invaliddbowner.excludedb&lt;/strong>&lt;/td>
&lt;td>Databases to exclude from invalid dbowner checks&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.invaliddbowner.name&lt;/strong>&lt;/td>
&lt;td>The database owner account should not be this user&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.network.latencymaxms&lt;/strong>&lt;/td>
&lt;td>Max network latency average&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.commandlogenabled&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s CommandLog Cleanup should be enabled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.commandlogscheduled&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s CommandLog Cleanup should be scheduled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.database&lt;/strong>&lt;/td>
&lt;td>The database where Ola&amp;rsquo;s maintenance solution is installed&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.deletebackuphistoryenabled&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s Delete Backup History should be enabled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.deletebackuphistoryscheduled&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s Delete Backup History should be scheduled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.installed&lt;/strong>&lt;/td>
&lt;td>Checks to see if Ola Hallengren solution is installed&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.outputfilecleanupenabled&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s Output File Cleanup should be enabled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.outputfilecleanupscheduled&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s Output File Cleanup should be scheduled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.purgejobhistoryenabled&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s Purge Job History should be enabled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.purgejobhistoryscheduled&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s Purge Job History should be scheduled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.systemfullenabled&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s Full System Database Backup should be enabled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.systemfullretention&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s Full System Database Backup retention number of hours&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.systemfullscheduled&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s Full System Database Backup should be scheduled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.systemintegritycheckenabled&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s System Database Integrity should be enabled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.systemintegritycheckscheduled&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s System Database Integrity should be scheduled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.userdiffenabled&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s Diff User Database Backup should be enabled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.userdiffretention&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s Diff User Database Backup retention number of hours&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.userdiffscheduled&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s Diff User Database Backup should be scheduled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.userfullenabled&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s Full User Database Backup should be enabled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.userfullretention&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s Full User Database Backup retention number of hours&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.userfullscheduled&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s Full User Database Backup should be scheduled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.userindexoptimizeenabled&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s User Index Optimization should be enabled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.userindexoptimizescheduled&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s User Index Optimization should be scheduled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.userintegritycheckenabled&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s User Database Integrity should be enabled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.userintegritycheckscheduled&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s User Database Integrity should be scheduled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.userlogenabled&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s Log User Database Backup should be enabled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.userlogretention&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s Log User Database Backup retention number of hours&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.ola.userlogscheduled&lt;/strong>&lt;/td>
&lt;td>Ola&amp;rsquo;s Log User Database Backup should be scheduled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.oleautomation&lt;/strong>&lt;/td>
&lt;td>OLE Automation should be enabled $true or disabled $false&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.pageverify&lt;/strong>&lt;/td>
&lt;td>Page verify option should be set to this value&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.recoverymodel.excludedb&lt;/strong>&lt;/td>
&lt;td>Databases to exclude from standard recovery model check&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.recoverymodel.type&lt;/strong>&lt;/td>
&lt;td>Standard recovery model&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.storage.backuppath&lt;/strong>&lt;/td>
&lt;td>Enables tests to check if servers have access to centralized backup location&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.validdbowner.excludedb&lt;/strong>&lt;/td>
&lt;td>Databases to exclude from valid dbowner checks&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.validdbowner.name&lt;/strong>&lt;/td>
&lt;td>The database owner account should be this user&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.whoisactive.database&lt;/strong>&lt;/td>
&lt;td>Which database should contain the sp_WhoIsActive stored procedure&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.xevent.requiredrunningsession&lt;/strong>&lt;/td>
&lt;td>List of XE Sessions that should be running.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.xevent.requiredstoppedsession&lt;/strong>&lt;/td>
&lt;td>List of XE Sessions that should not be running.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>policy.xevent.validrunningsession&lt;/strong>&lt;/td>
&lt;td>List of XE Sessions that can be be running.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>skip.backup.testing&lt;/strong>&lt;/td>
&lt;td>Don&amp;rsquo;t run Test-DbaLastBackup by default (it&amp;rsquo;s not read-only)&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>skip.connection.ping&lt;/strong>&lt;/td>
&lt;td>Skip the ping check for connectivity&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>skip.connection.remoting&lt;/strong>&lt;/td>
&lt;td>Skip PowerShell remoting check for connectivity&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>skip.database.filegrowthdisabled&lt;/strong>&lt;/td>
&lt;td>Skip validation of datafiles which have growth value equal to zero.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>skip.database.logfilecounttest&lt;/strong>&lt;/td>
&lt;td>Skip the logfilecount test&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>skip.datafilegrowthdisabled&lt;/strong>&lt;/td>
&lt;td>Skip validation of datafiles which have growth value equal to zero.&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>skip.dbcc.datapuritycheck&lt;/strong>&lt;/td>
&lt;td>Skip data purity check in last good dbcc command&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>skip.diffbackuptest&lt;/strong>&lt;/td>
&lt;td>Skip the Differential backup test&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>skip.logfilecounttest&lt;/strong>&lt;/td>
&lt;td>Skip the logfilecount test&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>skip.logshiptesting&lt;/strong>&lt;/td>
&lt;td>Skip the logshipping test&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>skip.tempdb1118&lt;/strong>&lt;/td>
&lt;td>Don&amp;rsquo;t run test for Trace Flag 1118&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>skip.tempdbfilecount&lt;/strong>&lt;/td>
&lt;td>Don&amp;rsquo;t run test for Temp Database File Count&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>skip.tempdbfilegrowthpercent&lt;/strong>&lt;/td>
&lt;td>Don&amp;rsquo;t run test for Temp Database File Growth in Percent&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>skip.tempdbfilesizemax&lt;/strong>&lt;/td>
&lt;td>Don&amp;rsquo;t run test for Temp Database Files Max Size&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;strong>skip.tempdbfilesonc&lt;/strong>&lt;/td>
&lt;td>Don&amp;rsquo;t run test for Temp Database Files on C&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>So there are a lot of configurations that you can use. A lot are already set by default but all of them you can configure for the values that you need for your own estate.&lt;/p>
&lt;p>The configurations are stored in the registry at HKCU:\Software\Microsoft\WindowsPowerShell\PSFramework\&lt;/p>
&lt;p>&lt;img src="https://dbachecks.io/assets/uploads/2018/02/01-registry.png"
loading="lazy"
>&lt;/p>
&lt;h2 id="first-configurations">First Configurations
&lt;/h2>&lt;p>First I would run this so that you can see all of the configs in a seperate window (note this does not work on PowerShell v6)&lt;/p>
&lt;pre>&lt;code>Get-DbcConfig | Out-GridView
&lt;/code>&lt;/pre>
&lt;p>Lets start with the first configurations that you will want to set. This should be the Instances and the Hosts that you want to check&lt;/p>
&lt;p>You can get the value of the configuration item using&lt;/p>
&lt;pre>&lt;code>Get-DbcConfigValue -Name app.sqlinstance
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://dbachecks.io/assets/uploads/2018/02/02-config.png"
loading="lazy"
>&lt;/p>
&lt;p>as you can see in the image, nothing is returned so we have no instances configured at present. We have added tab completion to the name parameter so that you can easily find the right one&lt;/p>
&lt;p>&lt;img src="https://dbachecks.io/assets/uploads/2018/02/03-autocomplete.png"
loading="lazy"
>&lt;/p>
&lt;p>If you want to look at more information about the configuration item you can use&lt;/p>
&lt;pre>&lt;code>Get-DbcConfig -Name app.sqlinstance
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://dbachecks.io/assets/uploads/2018/02/04-config.png"
loading="lazy"
>&lt;/p>
&lt;p>which shows you the name, current value and the description&lt;/p>
&lt;p>So lets set our first configuration for our SQL instance to localhost. I have included a video so you can see the auto-complete in action as well&lt;/p>
&lt;pre>&lt;code>Set-DbcConfig -Name app.sqlinstance localhost
&lt;/code>&lt;/pre>
&lt;p>This configuration will be used for any SQL based checks but not for any windows based ones like Services, PowerPlan, SPN, DiskSpace, Cluster so lets set the app.computername configuration as well&lt;/p>
&lt;p>&lt;img src="https://dbachecks.io/assets/uploads/2018/02/05-windows-config.png"
loading="lazy"
>&lt;/p>
&lt;p>This means that when we run invoke-DbcCheck with AllChecks or by specifying a check, it will run against the local machine and default instance unless we specify a sqlinstance when calling Invoke-DbcCheck. So the code below will not use the configuration for app.sqlinstance.&lt;/p>
&lt;pre>&lt;code>Invoke-DbcCheck -SqlInstance TheBeard
&lt;/code>&lt;/pre>
&lt;h2 id="exclude-a-check">Exclude a Check
&lt;/h2>&lt;p>You can exclude a check using the -ExcludeCheck parameter of Invoke-DbcConfig. In the example below I am running all of the Server checks but excluding the SPN as we are not on a domain&lt;/p>
&lt;pre>&lt;code>Invoke-DbcCheck -Check Server -ExcludeCheck SPN
&lt;/code>&lt;/pre>
&lt;p>There is a configuration setting to exclude checks as well. (Be careful this will exclude them even if you specifically specify a check using Invoke-DbcCheck but we do give you a warning!)&lt;/p>
&lt;p>So now I can run&lt;/p>
&lt;pre>&lt;code>Set-DbcConfig -Name command.invokedbccheck.excludecheck -Value SPN
Invoke-DbcCheck -Check Server
&lt;/code>&lt;/pre>
&lt;p>and all of the server checks except the SPN check will run against the local machine and the default instance that I have set in the config&lt;/p>
&lt;h2 id="creating-an-environment-config-and-exporting-it-to-use-any-time-we-like">Creating an environment config and exporting it to use any time we like
&lt;/h2>&lt;p>So lets make this a lot more useful. Lets create a configuration for our production environment and save it to disk (or even source control it!) so that we can use it again and again. We can also then pass it to other members of our team or even embed it in an automated process or our CI/CD system&lt;/p>
&lt;p>Lets build up a configuration for a number of tests for my “production” environment. I will not explain them all here but let you read through the code and the comments to see what has been set. You will see that some of them are due to me running the test on a single machine with one drive.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"># The computername we will be testing
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-DbcConfig -Name app.computername -Value localhost
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># The Instances we want to test
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-DbcConfig -Name app.sqlinstance -Value &amp;#39;localhost&amp;#39; ,&amp;#39;localhost\PROD1&amp;#39;,&amp;#39;localhost\PROD2&amp;#39;, &amp;#39;localhost\PROD3&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># The database owner we expect
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-DbcConfig -Name policy.validdbowner.name -Value &amp;#39;dbachecksdemo\dbachecks&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># the database owner we do NOT expect
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-DbcConfig -Name policy.invaliddbowner.name -Value &amp;#39;sa&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Should backups be compressed by default?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-DbcConfig -Name policy.backup.defaultbackupcompreesion -Value $true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Do we allow DAC connections?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-DbcConfig -Name policy.dacallowed -Value $true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># What recovery model should we have?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-DbcConfig -Name policy.recoverymodel.type -value FULL
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># What should our database growth type be?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-DbcConfig -Name policy.database.filegrowthtype -Value kb
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># What authentication scheme are we expecting?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-DbcConfig -Name policy.connection.authscheme -Value &amp;#39;NTLM&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Which Agent Operator should be defined?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-DbcConfig -Name agent.dbaoperatorname -Value &amp;#39;DBA Team&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Which Agent Operator email should be defined?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-DbcConfig -Name agent.dbaoperatoremail -Value &amp;#39;DBATeam@TheBeard.Local&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Which failsafe operator shoudl be defined?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-DbcConfig -Name agent.failsafeoperator -Value &amp;#39;DBA Team&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Where is the whoisactive stored procedure?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-DbcConfig -Name policy.whoisactive.database -Value DBAAdmin
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># What is the maximum time since I took a Full backup?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-DbcConfig -Name policy.backup.fullmaxdays -Value 7
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># What is the maximum time since I took a DIFF backup (in hours) ?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-DbcConfig -Name policy.backup.diffmaxhours -Value 26
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># What is the maximum time since I took a log backup (in minutes)?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-DbcConfig -Name policy.backup.logmaxminutes -Value 30
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># What is my domain name?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-DbcConfig -Name domain.name -Value &amp;#39;WORKGROUP&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Where is my Ola database?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-DbcConfig -Name policy.ola.database -Value DBAAdmin
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Which database should not be checked for recovery model
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-DbcConfig -Name policy.recoverymodel.excludedb -Value &amp;#39;master&amp;#39;,&amp;#39;msdb&amp;#39;,&amp;#39;tempdb&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># What is my SQL Credential
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-DbcConfig -Name app.sqlcredential -Value $null
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Should I skip the check for temp files on c?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-DbcConfig -Name skip.tempdbfilesonc -Value $true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Should I skip the check for temp files count?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-DbcConfig -Name skip.tempdbfilecount -Value $true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Which Checks should be excluded?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-DbcConfig -Name command.invokedbccheck.excludecheck -Value LogShipping,ExtendedEvent, HADR, PseudoSimple,spn
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># How many months before a build is unsupported do I want to fail the test?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-DbcConfig -Name policy.build.warningwindow -Value 6
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Get-Dbcconfig | ogv
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>When I run this I get&lt;/p>
&lt;p>&lt;img src="https://dbachecks.io/assets/uploads/2018/02/08-configuration.png"
loading="lazy"
>&lt;/p>
&lt;p>I can then export this to disk (to store in source control) using&lt;/p>
&lt;pre>&lt;code>Export-DbcConfig -Path C:\Users\dbachecks\Desktop\production_config.json
&lt;/code>&lt;/pre>
&lt;p>and I have a configuration file&lt;/p>
&lt;p>&lt;img src="https://dbachecks.io/assets/uploads/2018/02/09-configuration-json.png"
loading="lazy"
>&lt;/p>
&lt;p>which I can use any time to set the configuration for dbachecks using the Import-DbcConfig command (But this doesn’t work in VS Codes integrated terminal – which occasionally does odd things, this appears to be one of them)&lt;/p>
&lt;pre>&lt;code>Import-DbcConfig -Path C:\Users\dbachecks\Desktop\production_config.json
&lt;/code>&lt;/pre>
&lt;p>&lt;img src="https://dbachecks.io/assets/uploads/2018/02/10-import-configuration.png"
loading="lazy"
>&lt;/p>
&lt;p>So I can import this configuration and run my checks with it any time I like. This means that I can create many different test configurations for my many different environment or estate configurations.&lt;/p>
&lt;p>Yes, I know “good/best practice” says we should use the same configuration for all of our instances but we know that isn’t true. We have instances that were set up 15 years ago that are still in production. We have instances from the companies our organisation has bought over the years that were set up by system administrators. We have instances that were set up by shadow IT and now we have to support but cant change.&lt;/p>
&lt;p>As well as those though, we also have different environments. Our development or test environment will have different requirements to our production environments.&lt;/p>
&lt;p>In this hypothetical situation the four instances for four different applications have 4 development containers which are connected to using SQL Authentication. We will need a different configuration.&lt;/p>
&lt;h2 id="sql-authentication">SQL Authentication
&lt;/h2>&lt;p>We can set up SQL Authentication for connecting to our SQL Instances using the app.sqlcredential configuration. this is going to hold a PSCredential object for SQL Authenticated connection to your instance. If this is set the checks will always try to use it. Yes this means that the same username and password is being used for each connection. No there is currently no way to choose which instances use it and which don’t. This may be a limitation but as you will see further down you can still do this with different configurations&lt;/p>
&lt;p>To set the  SQL Authentication run&lt;/p>
&lt;pre>&lt;code>Set-DbcConfig -Name app.sqlcredential -Value (Get-Credential)
&lt;/code>&lt;/pre>
&lt;p>This will give a prompt for you to enter the credential&lt;/p>
&lt;p>&lt;img src="https://dbachecks.io/assets/uploads/2018/02/11-prompt-for-credenial.png"
loading="lazy"
>&lt;/p>
&lt;h2 id="development-environment-configuration">Development Environment Configuration
&lt;/h2>&lt;p>So now we know how to set a SQL Authentication configuration we can create our development environment configuration like so. As you can see below the values are different for the checks and more checks have been skipped. I wont explain it all, if it doesn’t make sense ask a question in the comments or in the dbachecks in SQL Server Community Slack&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl">#region Dev Config
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># The Instances we want to test
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-DbcConfig -Name app.sqlinstance -Value &amp;#39;localhost,1401&amp;#39; ,&amp;#39;localhost,1402&amp;#39;,&amp;#39;localhost,1403&amp;#39;, &amp;#39;localhost,1404&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># What is my SQL Credential
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-DbcConfig -Name app.sqlcredential -Value (Get-Credential)
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># The database owner we expect
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-DbcConfig -Name policy.validdbowner.name -Value &amp;#39;sa&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># What authentication scheme are we expecting?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-DbcConfig -Name policy.connection.authscheme -Value &amp;#39;SQL&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># the database owner we do NOT expect
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-DbcConfig -Name policy.invaliddbowner.name -Value &amp;#39;dbachecksdemo\dbachecks&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Should backups be compressed by default?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-DbcConfig -Name policy.backup.defaultbackupcompreesion -Value $false
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># What should our database growth type be?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-DbcConfig -Name policy.database.filegrowthtype -Value kb
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># What should our database growth value be higher than (Mb)?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-DbcConfig -Name policy.database.filegrowthvalue -Value 64
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Do we allow DAC connections?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-DbcConfig -Name policy.dacallowed -Value $false
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># What is the maximum latency (ms)?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-DbcConfig -Name policy.network.latencymaxms -Value 100
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># What recovery model should we have?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-DbcConfig -Name policy.recoverymodel.type -value Simple
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Where is the whoisactive stored procedure?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-DbcConfig -Name policy.whoisactive.database -Value DBAAdmin
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># What is my domain name?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-DbcConfig -Name domain.name -Value &amp;#39;WORKGROUP&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Which database should not be checked for recovery model
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-DbcConfig -Name policy.recoverymodel.excludedb -Value &amp;#39;master&amp;#39;,&amp;#39;msdb&amp;#39;,&amp;#39;tempdb&amp;#39;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Should I skip the check for temp files on c?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-DbcConfig -Name skip.tempdbfilesonc -Value $true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Should I skip the check for temp files count?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-DbcConfig -Name skip.tempdbfilecount -Value $true
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># How many months before a build is unsupported do I want to fail the test?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-DbcConfig -Name policy.build.warningwindow -Value 6
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Which Checks should be excluded?
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Set-DbcConfig -Name command.invokedbccheck.excludecheck -Value LogShipping,ExtendedEvent, HADR, SaReNamed, PseudoSimple,spn, DiskSpace, DatabaseCollation,Agent,Backup,UnusedIndex,LogfileCount,FileGroupBalanced,LogfileSize,MaintenanceSolution,ServerNameMatch
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Export-DbcConfig -Path C:\Users\dbachecks\Desktop\development_config.json
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="using-the-different-configurations">Using The Different Configurations
&lt;/h2>&lt;p>Now I have two configurations, one for my Production Environment and one for my development environment. I can run my checks whenever I like (perhaps you will automate this in some way)&lt;/p>
&lt;ul>
&lt;li>Import the production configuration&lt;/li>
&lt;li>Run my tests with that configuration and create a json file for my Power Bi labelled production&lt;/li>
&lt;li>Import the development configuration (and enter the SQL authentication credential)&lt;/li>
&lt;li>Run my tests with that configuration and create a json file for my Power Bi labelled development&lt;/li>
&lt;li>Start Power Bi to show those results&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"># Import the production config
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Import-DbcConfig C:\Users\dbachecks\Desktop\production_config.json
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Run the tests with the production config and create/update the production json
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Invoke-DbcCheck -AllChecks -Show Fails -PassThru |Update-DbcPowerBiDataSource -Environment Production
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Import the development config
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Import-DbcConfig C:\Users\dbachecks\Desktop\development_config.json
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Run the tests with the production config and create/update the development json
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Invoke-DbcCheck -AllChecks -Show Fails -PassThru |Update-DbcPowerBiDataSource -Environment Development
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Open the PowerBi
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Start-DbcPowerBi
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>I have published the Power Bi so that you can see what it would like and have a click around (maybe you can see improvements you would like to contribute)&lt;/p>
&lt;p>now we can see how each environment is performing according to our settings for each environment&lt;/p>
&lt;h2 id="combining-configurations-into-one-result-set">Combining Configurations Into One Result Set
&lt;/h2>&lt;p>As you saw above, by using the Environment parameter of Update-DbcPowerBiDataSource you can add different environments to one report. But if I wanted to have a report for my application APP1 showing both production and development environments but they have different configurations how can I do this?&lt;/p>
&lt;p>Here’s how.&lt;/p>
&lt;ul>
&lt;li>Create a configuration for the production environment (I have used the production configuration one from above but only localhost for the instance)&lt;/li>
&lt;li>Export it using to  C:\Users\dbachecks\Desktop\APP1-Prod_config.json&lt;/li>
&lt;li>Create a configuration for the development environment (I have used the development configuration one from above but only localhost,1401 for the instance)&lt;/li>
&lt;li>Export it using to  C:\Users\dbachecks\Desktop\APP1-Dev_config.json&lt;/li>
&lt;/ul>
&lt;p>Then run&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-fallback" data-lang="fallback">&lt;span class="line">&lt;span class="cl"># Import the production config
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Import-DbcConfig C:\Users\dbachecks\Desktop\APP1-Prod_config.json
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Run the tests with the production config and create/update the production json
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Invoke-DbcCheck -AllChecks -Show Fails -PassThru |Update-DbcPowerBiDataSource -Environment APP1
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Import the development config
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Import-DbcConfig C:\Users\dbachecks\Desktop\APP1-Dev_config.json
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"># Run the tests with the production config and create/update the development json
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Invoke-DbcCheck -AllChecks -Show Fails -PassThru |Update-DbcPowerBiDataSource -Environment APP1 -Append
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">Start-DbcPowerBi
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Notice that this time there is an Append on the last Invoke-DbcCheck this creates a single json file for the PowerBi and the results look like this. Now we have the results for our application and both the production environment localhost and the development container localhost,1401&lt;/p>
&lt;h2 id="its-open-source--we-want-your-ideas-issues-new-code">It’s Open Source – We Want Your Ideas, Issues, New Code
&lt;/h2>&lt;p>dbachecks is open-source &lt;a class="link" href="https://github.com/potatoqualitee/dbachecks" target="_blank" rel="noopener"
>available on GitHub for anyone to contribute&lt;/a>&lt;/p>
&lt;p>We would love you to contribute. Please open issues for new tests, enhancements, bugs. Please fork the repository and add code to improve the module. please give feedback to make this module even more useful&lt;/p>
&lt;p>You can also come in the &lt;a class="link" href="https://sqlps.io/slack" target="_blank" rel="noopener"
>SQL Server Community Slack&lt;/a> and join the dbachecks channel and get advice, make comments or just join in the conversation&lt;/p>
&lt;h2 id="thank-you">Thank You
&lt;/h2>&lt;p>I want to say thank you to all of the people who have enabled dbachecks to get this far. These wonderful people have used their own time to ensure that you have a useful tool available to you for free&lt;/p>
&lt;p>Chrissy Lemaire &lt;a class="link" href="https://twitter.com/cl" target="_blank" rel="noopener"
>@cl&lt;/a>&lt;/p>
&lt;p>Fred Weinmann &lt;a class="link" href="https://twitter.com/FredWeinmann" target="_blank" rel="noopener"
>@FredWeinmann&lt;/a>&lt;/p>
&lt;p>Cláudio Silva &lt;a class="link" href="https://github.com/ClaudioESSilva" target="_blank" rel="noopener"
>@ClaudioESSilva&lt;/a>&lt;/p>
&lt;p>Stuart Moore &lt;a class="link" href="https://github.com/napalmgram" target="_blank" rel="noopener"
>@napalmgram&lt;/a>&lt;/p>
&lt;p>Shawn Melton &lt;a class="link" href="https://twitter.com/wsmelton" target="_blank" rel="noopener"
>@wsmelton&lt;/a>&lt;/p>
&lt;p>Garry Bargsley &lt;a class="link" href="https://twitter.com/gbargsley" target="_blank" rel="noopener"
>@gbargsley&lt;/a>&lt;/p>
&lt;p>Stephen Bennett &lt;a class="link" href="https://twitter.com/staggerlee011" target="_blank" rel="noopener"
>@staggerlee011&lt;/a>&lt;/p>
&lt;p>Sander Stad &lt;a class="link" href="https://twitter.com/sqlstad" target="_blank" rel="noopener"
>@SQLStad&lt;/a>&lt;/p>
&lt;p>Jess Pomfret &lt;a class="link" href="https://twitter.com/jpomfret" target="_blank" rel="noopener"
>@jpomfret&lt;/a>&lt;/p>
&lt;p>Jason Squires &lt;a class="link" href="https://twitter.com/js0505" target="_blank" rel="noopener"
>@js0505&lt;/a>&lt;/p>
&lt;p>Shane O’Neill &lt;a class="link" href="https://twitter.com/SOZDBA" target="_blank" rel="noopener"
>@SOZDBA&lt;/a>&lt;/p>
&lt;p>and all of the other people who have contributed in the dbachecks Slack channel&lt;/p></description></item><item><title>How to run a PowerShell script file with Verbose, Confirm or WhatIf</title><link>https://dbachecks.io/blog/how-to-run-a-powershell-script-file-with-verbose-confirm-or-whatif/</link><pubDate>Tue, 23 Jan 2018 00:00:00 +0000</pubDate><guid>https://dbachecks.io/blog/how-to-run-a-powershell-script-file-with-verbose-confirm-or-whatif/</guid><description>&lt;img src="https://dbachecks.io/assets/uploads/2018/01/02-Showing-the-results.png" alt="Featured image of post How to run a PowerShell script file with Verbose, Confirm or WhatIf" />&lt;p>Before you run a PowerShell command that makes a change to something you should check that it is going to do what you expect. You can do this by using the WhatIf parameter for commands that support it. For example, if you wanted to create a New SQL Agent Job Category you would use the &lt;a class="link" href="http://dbatools.io" target="_blank" rel="noopener"
>awesome dbatools module&lt;/a> and write some code like this&lt;/p>
&lt;pre>&lt;code>New-DbaAgentJobCategory -SqlInstance ROB-XPS -Category 'Backup'
&lt;/code>&lt;/pre>
&lt;p>before you run it, you can check what it is going to do using&lt;/p>
&lt;pre>&lt;code>New-DbaAgentJobCategory -SqlInstance ROB-XPS -Category 'Backup' -WhatIf
&lt;/code>&lt;/pre>
&lt;p>which gives a result like this&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/01/01-Whatif.png"
loading="lazy"
>&lt;/p>
&lt;p>This makes it easy to do at the command line but when we get confident with PowerShell we will want to write scripts to perform tasks using more than one command. So how can we ensure that we can check that those will do what we are expecting without actually running the script and see what happens? Of course, there are Unit and integration testing that should be performed using &lt;a class="link" href="https://blog.robsewell.com/writing-dynamic-and-random-tests-cases-for-pester/" target="_blank" rel="noopener"
>Pester&lt;/a> when developing the script but there will still be occasions when we want to see what this script will do this time in this environment.&lt;/p>
&lt;p>Lets take an example. We want to place our SQL Agent jobs into specific custom categories depending on their name. We might write a script like this&lt;/p>
&lt;pre>&lt;code>&amp;lt;#
.SYNOPSIS
Adds SQL Agent Jobs to categories and creates the categories if needed
.DESCRIPTION
Adds SQL Agent Jobs to categories and creates the categories if needed. Creates
Backup', 'Index', 'TroubleShooting','General Info Gathering' categories and adds
the agent jobs depending on name to the category
.PARAMETER Instance
The Instance to run the script against
#&amp;gt;
Param(
[string]$Instance
)
$Categories = 'Backup', 'Index','DBCC', 'TroubleShooting', 'General Info Gathering'
$Categories.ForEach{
## Create Category if it doesnot exist
If (-not (Get-DbaAgentJobCategory -SqlInstance $instance -Category $PSItem)) {
New-DbaAgentJobCategory -SqlInstance $instance -Category $PSItem -CategoryType LocalJob
}
}
## Get the agent jobs and iterate through them
(Get-DbaAgentJob -SqlInstance $instance).ForEach{
## Depending on the name of the Job - Put it in a Job Category
switch -Wildcard ($PSItem.Name) {
'*DatabaseBackup*' {
Set-DbaAgentJob -SqlInstance $instance -Job $PSItem -Category 'Backup'
}
'*Index*' {
Set-DbaAgentJob -SqlInstance $instance -Job $PSItem -Category 'Index'
}
'*DatabaseIntegrity*' {
Set-DbaAgentJob -SqlInstance $instance -Job $PSItem -Category 'DBCC'
}
'*Log SP_*' {
Set-DbaAgentJob -SqlInstance $instance -Job $PSItem -Category 'TroubleShooting'
}
'*Collection*' {
Set-DbaAgentJob -SqlInstance $instance -Job $PSItem -Category 'General Info Gathering'
}
## Otherwise put it in the uncategorised category
Default {
Set-DbaAgentJob -SqlInstance $instance -Job $PSItem -Category '[Uncategorized (Local)]'
}
}
}
&lt;/code>&lt;/pre>
&lt;p>You can run this script against any SQL instance by calling  it and passing an instance parameter from the command line like this&lt;/p>
&lt;pre>&lt;code> &amp;amp; C:\temp\ChangeJobCategories.ps1 -instance ROB-XPS
&lt;/code>&lt;/pre>
&lt;p>If you wanted to see what would happen, you could edit the script and add the WhatIf parameter to every changing command but that’s not really a viable solution. What you can do is&lt;/p>
&lt;pre>&lt;code>$PSDefaultParameterValues['*:WhatIf'] = $true
&lt;/code>&lt;/pre>
&lt;p>this will set all commands that accept WhatIf to use the WhatIf parameter. This means that if you are using functions that you have written internally you must ensure that you write your functions to use the common parameters&lt;/p>
&lt;p>Once you have set the default value for WhatIf as above, you can simply call your script and see the WhatIf output&lt;/p>
&lt;pre>&lt;code> &amp;amp; C:\temp\ChangeJobCategories.ps1 -instance ROB-XPS
&lt;/code>&lt;/pre>
&lt;p>which will show the WhatIf output for the script&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/01/02-Showing-the-results.png"
loading="lazy"
>&lt;/p>
&lt;p>Once you have checked that everything is as you expected then you can remove the default value for the WhatIf parameter and run the script&lt;/p>
&lt;pre>&lt;code>$PSDefaultParameterValues['*:WhatIf'] = $false
&amp;amp; C:\temp\ChangeJobCategories.ps1 -instance ROB-XPS
&lt;/code>&lt;/pre>
&lt;p>and get the expected output&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/01/03-run-the-script-1.png"
loading="lazy"
>&lt;/p>
&lt;p>If you wish to see the verbose output or ask for confirmation before any change you can set those default parameters like this&lt;/p>
&lt;pre>&lt;code>## To Set Verbose output
$PSDefaultParameterValues['*:Verbose'] = $true
## To Set Confirm
$PSDefaultParameterValues['*:Confirm'] = $true
&lt;/code>&lt;/pre>
&lt;p>and set them back by setting to false&lt;/p></description></item><item><title>Pester 4.2.0 has a Because…… because :-)</title><link>https://dbachecks.io/blog/pester-4.2.0-has-a-because-because-/</link><pubDate>Thu, 18 Jan 2018 00:00:00 +0000</pubDate><guid>https://dbachecks.io/blog/pester-4.2.0-has-a-because-because-/</guid><description>&lt;img src="https://dbachecks.io/assets/uploads/2018/01/01-Because-1.png" alt="Featured image of post Pester 4.2.0 has a Because…… because :-)" />&lt;p>I was going through my demo for the &lt;a class="link" href="http://meetu.ps/e/DdYV6/gHMdv/g" target="_blank" rel="noopener"
>South Coast User Group meeting&lt;/a> tonight and decided to add some details about the Because parameter available in the Pester pre-release version 4.2.0.&lt;/p>
&lt;p>To install a pre-release version you need to get the latest  &lt;a class="link" href="https://go.microsoft.com/fwlink/?linkid=846259" target="_blank" rel="noopener"
>PowerShellGet&lt;/a> module. This is pre-installed with PowerShell v6 but for earlier versions open PowerShell as administrator and run&lt;/p>
&lt;pre>&lt;code>Install-Module PowerShellGet
&lt;/code>&lt;/pre>
&lt;p>You can try out the Pester pre-release version (once you have the latest PowerShellGet) by installing it from the &lt;a class="link" href="http://powershellgallery.com" target="_blank" rel="noopener"
>PowerShell Gallery&lt;/a> with&lt;/p>
&lt;pre>&lt;code>Install-Module -Name Pester -AllowPrerelease -Force # -Scope CurrentUser # if not admin
&lt;/code>&lt;/pre>
&lt;p>There are a number of improvements as you can see in &lt;a class="link" href="https://github.com/pester/Pester/blob/master/CHANGELOG.md" target="_blank" rel="noopener"
>the change log&lt;/a> I particularly like the&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>Add -BeTrue to test for truthy values&lt;/li>
&lt;li>Add -BeFalse to test for falsy values&lt;/li>
&lt;/ul>&lt;/blockquote>
&lt;p>This release adds the Because parameter to the all assertions. This means that you can add a reason why the test has failed. As &lt;a class="link" href="http://jakubjares.com/2017/12/19/using-because/" target="_blank" rel="noopener"
>JAKUB JAREŠ writes here&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>Reasons force you think more&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Reasons document your intent&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Reasons make your TestCases clearer&lt;/p>
&lt;/li>
&lt;li>
&lt;p>So you can do something like this&lt;/p>
&lt;p>Describe &amp;ldquo;This shows the Because&amp;rdquo;{
It &amp;ldquo;Should be true&amp;rdquo; {
$false | Should -BeTrue -Because &amp;ldquo;The Beard said so&amp;rdquo;
}
}&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>Which gives an error message like this 🙂&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/01/01-Because-1.png"
loading="lazy"
>&lt;/p>
&lt;p>As you can see the Expected gives the expected value and then your Because statement and then the actual result. Which means that you could write validation tests like&lt;/p>
&lt;pre>&lt;code>Describe &amp;quot;My System&amp;quot; {
Context &amp;quot;Server&amp;quot; {
It &amp;quot;Should be using XP SP3&amp;quot; {
(Get-CimInstance -ClassName win32_operatingsystem) .Version | Should -Be '5.1.2600' -Because &amp;quot;We have failed to bother to update the App and it only works on XP&amp;quot;
}
It &amp;quot;Should be running as rob-xps\\mrrob&amp;quot; {
whoami | Should -Be 'rob-xps\\mrrob' -Because &amp;quot;This is the user with the permissions&amp;quot;
}
It &amp;quot;Should have SMB1 enabled&amp;quot; {
(Get-SmbServerConfiguration).EnableSMB1Protocol | Should -BeTrue -Because &amp;quot;We don't care about the risk&amp;quot;
}
}
}
&lt;/code>&lt;/pre>
&lt;p>and get a result like this&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2018/01/02-example.png" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/01/02-example.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>Or if you were looking to validate your SQL Server you could write something like this&lt;/p>
&lt;pre>&lt;code>It &amp;quot;Backups Should have Succeeeded&amp;quot; {
$Where = {$\_IsEnabled -eq $true -and $\_.Name -like '\*databasebackup\*'}
$Should = @{
BeTrue = $true
Because = &amp;quot;WE NEED BACKUPS - OMG&amp;quot;
}
(Get-DbaAgentJob -SqlInstance $instance| Where-Object $where).LastRunOutcome -NotContains 'Failed' | Should @Should
}
&lt;/code>&lt;/pre>
&lt;p>or maybe your security policies allow Windows Groups as logins on your SQL instances. You could easily link to the documentation and explain why this is important. This way you could build up a set of tests to validate your SQL Server is just so for your environment&lt;/p>
&lt;pre>&lt;code>It &amp;quot;Should only have Windows groups as logins&amp;quot; {
$Should = @{
Befalse = $true
Because = &amp;quot;Our Security Policies say we must only have Windows groups as logins - See this document&amp;quot;
}
(Get-DbaLogin -SqlInstance $instance -WindowsLogins). LoginType -contains 'WindowsUser' | Should @Should
}
&lt;/code>&lt;/pre>
&lt;p>Just for fun, these would look like this&lt;/p>
&lt;p>&lt;a class="link" href="https://blog.robsewell.com/assets/uploads/2018/01/03-for-fun.png" target="_blank" rel="noopener"
>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/01/03-for-fun.png"
loading="lazy"
>&lt;/a>&lt;/p>
&lt;p>and the code looks like&lt;/p>
&lt;pre>&lt;code>$Instances = 'Rob-XPS', 'Rob-XPS\\Bolton'
foreach ($instance in $Instances) {
$Server, $InstanceName = $Instance.Split('/')
if ($InstanceName.Length -eq 0) {$InstanceName = 'MSSSQLSERVER'}
Describe &amp;quot;Testing the instance $instance&amp;quot; {
Context &amp;quot;SQL Agent Jobs&amp;quot; {
It &amp;quot;Backups Should have Succeeeded&amp;quot; {
$Where = {$\_IsEnabled -eq $true -and $\_. Name -like '\*databasebackup\*'}
$Should = @{
BeTrue = $true
Because = &amp;quot;WE NEED BACKUPS - OMG &amp;quot;
}
(Get-DbaAgentJob -SqlInstance $instance| Where-Object $where).LastRunOutcome -NotContains 'Failed' | Should @Should
}
Context &amp;quot;Logins&amp;quot; {
It &amp;quot;Should only have Windows groups as logins&amp;quot; {
$Should = @{
Befalse = $true
Because = &amp;quot;Our Security Policies say we must only have Windows groups as logins - See this document&amp;quot;
}
(Get-DbaLogin -SqlInstance $instance -WindowsLogins).LoginType -contains 'WindowsUser' | Should @Should
}
}
}
}
}
&lt;/code>&lt;/pre>
&lt;p>This will be a useful improvement to Pester when it is released and enable you to write validation checks with explanations.&lt;/p>
&lt;blockquote>
&lt;p>Come and Learn Some PowerShell Magic* at &lt;a class="link" href="https://twitter.com/hashtag/SQLBits?src=hash&amp;amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener"
>#SQLBits&lt;/a> with &lt;a class="link" href="https://twitter.com/cl?ref_src=twsrc%5Etfw" target="_blank" rel="noopener"
>@cl&lt;/a> and I&lt;br>
Details &lt;a class="link" href="https://t.co/7OfK75e6Y1" target="_blank" rel="noopener"
>https://t.co/7OfK75e6Y1&lt;/a>&lt;br>
Registration &lt;a class="link" href="https://t.co/RDSkPlfMMx" target="_blank" rel="noopener"
>https://t.co/RDSkPlfMMx&lt;/a>&lt;br>
*PowerShell is not magic – it just might appear that way &lt;a class="link" href="https://t.co/5czPzYR3QD" target="_blank" rel="noopener"
>pic.twitter.com/5czPzYR3QD&lt;/a>&lt;/p>
&lt;p>— Rob Sewell (@sqldbawithbeard) &lt;a class="link" href="https://twitter.com/sqldbawithbeard/status/935143475418402816?ref_src=twsrc%5Etfw" target="_blank" rel="noopener"
>November 27, 2017&lt;/a>&lt;/p>&lt;/blockquote>
&lt;p>&lt;a class="link" href="https://dbatools.io/new-module-coming-soon/" target="_blank" rel="noopener"
>Chrissy has written about dbachecks&lt;/a> the new up and coming community driven open source PowerShell module for SQL DBAs to validate their SQL Server estate. we have taken some of the ideas that we have presented about a way of using &lt;a class="link" href="http://dbatools.io" target="_blank" rel="noopener"
>dbatools&lt;/a> with &lt;a class="link" href="https://github.com/Pester/Pester" target="_blank" rel="noopener"
>Pester&lt;/a> to validate that everything is how it should be and placed them into a meta data driven framework to make things easy for anyone to use. It is looking really good and I am really excited about it. It will be released very soon.&lt;/p>
&lt;p>Chrissy and I will be doing a pre-con at &lt;a class="link" href="http://sqlbits.com" target="_blank" rel="noopener"
>SQLBits&lt;/a> where we will talk in detail about how this works. &lt;a class="link" href="http://sqlbits.com/information/event17/Reliable_Repeatable__Automated_PowerShell_for_DBAs/trainingdetails.aspx" target="_blank" rel="noopener"
>You can find out more and sign up here&lt;/a>&lt;/p></description></item><item><title>Using the AST in Pester for dbachecks</title><link>https://dbachecks.io/blog/using-the-ast-in-pester-for-dbachecks/</link><pubDate>Mon, 15 Jan 2018 00:00:00 +0000</pubDate><guid>https://dbachecks.io/blog/using-the-ast-in-pester-for-dbachecks/</guid><description>&lt;img src="https://dbachecks.io/assets/uploads/2018/01/02-Pester-results-1.png" alt="Featured image of post Using the AST in Pester for dbachecks" />&lt;p>TagLine – My goal – Chrissy will appreciate Unit Tests one day 🙂&lt;/p>
&lt;p>&lt;a class="link" href="https://dbatools.io/new-module-coming-soon/" target="_blank" rel="noopener"
>Chrissy has written about dbachecks&lt;/a> the new up and coming community driven open source PowerShell module for SQL DBAs to validate their SQL Server estate. we have taken some of the ideas that we have presented about a way of using &lt;a class="link" href="http://dbatools.io" target="_blank" rel="noopener"
>dbatools&lt;/a> with &lt;a class="link" href="https://github.com/Pester/Pester" target="_blank" rel="noopener"
>Pester&lt;/a> to validate that everything is how it should be and placed them into a meta data driven framework to make things easy for anyone to use. It is looking really good and I am really excited about it. It will be released very soon.&lt;/p>
&lt;p>Chrissy and I will be doing a pre-con at &lt;a class="link" href="http://sqlbits.com" target="_blank" rel="noopener"
>SQLBits&lt;/a> where we will talk in detail about how this works. &lt;a class="link" href="http://sqlbits.com/information/event17/Reliable_Repeatable__Automated_PowerShell_for_DBAs/trainingdetails.aspx" target="_blank" rel="noopener"
>You can find out more and sign up here&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://claudioessilva.eu/" target="_blank" rel="noopener"
>Cláudio Silva&lt;/a> has improved my &lt;a class="link" href="https://blog.robsewell.com/a-pretty-powerbi-pester-results-template-file/" target="_blank" rel="noopener"
>PowerBi For Pester&lt;/a> file and made it beautiful and whilst we were discussing this we found that if the Pester Tests were not formatted correctly the Power Bi looked … well rubbish to be honest! Chrissy asked if we could enforce some rules for writing our Pester tests.&lt;/p>
&lt;p>The rules were&lt;/p>
&lt;p>The Describe title should be in double quotes&lt;br>
The Describe should use the plural Tags parameter&lt;br>
The Tags should be singular&lt;br>
The first Tag should be a unique tag in Get-DbcConfig&lt;br>
The context title should end with $psitem&lt;br>
The code should use Get-SqlInstance or Get-ComputerName&lt;br>
The Code should use the forEach method&lt;br>
The code should not use $_&lt;br>
The code should contain a Context block&lt;/p>
&lt;p>She asked me if I could write the Pester Tests for it and this is how I did it. I needed to look at the Tags parameter for the Describe. It occurred to me that this was a job for the Abstract Syntax Tree (AST). I don’t know very much about the this but I sort of remembered reading a blog post by &lt;a class="link" href="http://www.lazywinadmin.com/2016/08/powershellpester-make-sure-your.html" target="_blank" rel="noopener"
>Francois-Xavier Cat about using it with Pester&lt;/a> so I went and read that and &lt;a class="link" href="https://stackoverflow.com/questions/39909021/parsing-powershell-script-with-ast" target="_blank" rel="noopener"
>found an answer on Stack Overflow&lt;/a> as well. These looked just like what I needed so I made use of them. Thank you very much to Francois-Xavier and wOxxOm for sharing.&lt;/p>
&lt;p>The first thing I did was to get the Pester Tests which we have located in a checks folder and loop through them and get the content of the file with the Raw parameter&lt;/p>
&lt;pre>&lt;code>Context &amp;quot;$($_.Name) - Checking Describes titles and tags&amp;quot; {
&lt;/code>&lt;/pre>
&lt;p>Then I decided to look at the Describes using the method that wOxxOm (I know no more about this person!) showed.&lt;/p>
&lt;pre>&lt;code>$Describes = \[Management.Automation.Language.Parser\] ::ParseInput($check, \[ref\]$tokens, \[ref\]$errors).
FindAll(\[Func\[Management.Automation.Language.Ast, bool\]\] {
param($ast)
$ast.CommandElements -and
$ast.CommandElements\[0\].Value -eq 'describe'
}, $true) |
ForEach {
$CE = $_.CommandElements
$secondString = ($CE |Where { $_.StaticType.name -eq 'string' })\[1\]
$tagIdx = $CE.IndexOf(($CE |Where ParameterName -eq'Tags') ) + 1
$tags = if ($tagIdx -and $tagIdx -lt $CE.Count) {
$CE\[$tagIdx\].Extent
}
New-Object PSCustomObject -Property @{
Name = $secondString
Tags = $tags
}
}
&lt;/code>&lt;/pre>
&lt;p>As I understand it, this code is using the Parser on the $check (which contains the code from the file) and finding all of the Describe commands and creating an object of the title of the Describe with the StaticType equal to String and values from the Tag parameter.&lt;/p>
&lt;p>When I ran this against the database tests file I got the following results&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/01/01-describes-1.png"
loading="lazy"
>&lt;/p>
&lt;p>Then it was a simple case of writing some tests for the values&lt;/p>
&lt;pre>&lt;code>@($describes).Foreach{
$title = $PSItem.Name.ToString().Trim('&amp;quot;').Trim('''')
It &amp;quot;$title Should Use a double quote after the Describe&amp;quot; {
$PSItem.Name.ToString().Startswith('&amp;quot;')| Should be $true
$PSItem.Name.ToString().Endswith('&amp;quot;')| Should be $true
}
It &amp;quot;$title should use a plural for tags&amp;quot; {
$PsItem.Tags| Should Not BeNullOrEmpty
}
# a simple test for no esses apart from statistics and Access!!
if ($null -ne $PSItem.Tags) {
$PSItem.Tags.Text.Split(',').Trim().Where{($_ -ne '$filename') -and ($_ -notlike '\*statistics\*') -and ($_ -notlike '\*BackupPathAccess\*') }.ForEach{
It &amp;quot;$PsItem Should Be Singular&amp;quot; {
$_.ToString().Endswith('s')| Should Be $False
}
}
It &amp;quot;The first Tag Should Be in the unique Tags returned from Get-DbcCheck&amp;quot; {
$UniqueTags -contains $PSItem.Tags.Text.Split(',') \[0\].ToString()| Should Be $true
}
}
else {
It &amp;quot;You haven't used the Tags Parameter so we can't check the tags&amp;quot; {
$false| Should be $true
}
}
}
&lt;/code>&lt;/pre>
&lt;p>The Describes variable is inside @() so that if there is only one the ForEach Method will still work. The unique tags are returned from our command Get-DbcCheck which shows all of the checks. We will have a unique tag for each test so that they can be run individually.&lt;/p>
&lt;p>Yes, I have tried to ensure that the tags are singular by ensuring that they do not end with an s (apart from statistics) and so had to not check  BackupPathAccess and statistics. Filename is a variable that we add to each Describe Tags so that we can run all of the tests in one file. I added a little if block to the Pester as well so that the error if the Tags parameter was not passed was more obvious&lt;/p>
&lt;p>I did the same with the context blocks as well&lt;/p>
&lt;pre>&lt;code>Context &amp;quot;$($_.Name) - Checking Contexts&amp;quot; {
## Find the Contexts
$Contexts = \[Management.Automation.Language.Parser\] ::ParseInput($check, \[ref\]$tokens, \[ref\]$errors).
FindAll(\[Func\[Management.Automation.Language.Ast, bool\] \] {
param($ast)
$ast.CommandElements -and
$ast.CommandElements\[0\].Value -eq 'Context'
}, $true) |
ForEach {
$CE = $_.CommandElements
$secondString = ($CE |Where { $_.StaticType.name -eq 'string' })\[1\]
New-Object PSCustomObject -Property @{
Name = $secondString
}
}
@($Contexts).ForEach{
$title = $PSItem.Name.ToString().Trim('&amp;quot;').Trim('''')
It &amp;quot;$Title Should end with `$psitem So that the PowerBi will work correctly&amp;quot; {
$PSItem.Name.ToString().Endswith('psitem&amp;quot;')| Should Be $true
}
}
}
&lt;/code>&lt;/pre>
&lt;p>This time we look for the Context command and ensure that the string value ends with psitem as the PowerBi parses the last value when creating columns&lt;/p>
&lt;p>Finally I got all of the code and check if it matches some coding standards&lt;/p>
&lt;pre>&lt;code>Context &amp;quot;$($_.Name) - Checking Code&amp;quot; {
## This just grabs all the code
$AST = \[System.Management.Automation.Language.Parser\] ::ParseInput($Check, \[ref\]$null, \[ref\]$null)
$Statements = $AST.EndBlock.statements.Extent
## Ignore the filename line
@($Statements.Where{$_.StartLineNumber -ne 1}).ForEach{
$title = \[regex\]::matches($PSItem.text, &amp;quot;Describe(. *)-Tag&amp;quot;).groups\[1\].value.Replace('&amp;quot;', '').Replace ('''', '').trim()
It &amp;quot;$title Should Use Get-SqlInstance or Get-ComputerName&amp;quot; {
($PSItem.text -Match 'Get-SqlInstance') -or ($psitem.text -match 'Get-ComputerName')| Should be $true
}
It &amp;quot;$title Should use the ForEach Method&amp;quot; {
($Psitem.text -match 'Get-SqlInstance\\).ForEach {') -or ($Psitem.text -match 'Get-ComputerName\\). ForEach{')| Should Be $true# use the \ to escape the )
}
It &amp;quot;$title Should not use `$_&amp;quot; {
($Psitem.text -match '$_')| Should Be $false
}
It &amp;quot;$title Should Contain a Context Block&amp;quot; {
$Psitem.text -match 'Context'| Should Be $True
}
}
&lt;/code>&lt;/pre>
&lt;p>I trim the title from the Describe block so that it is easy to see where the failures (or passes) are with some regex and then loop through each statement apart from the first line to ensure that the code is using our internal commands Get-SQLInstance or Get-ComputerName to get information, that we are looping through each of those arrays using the ForEach method rather than ForEach-Object and using $psitem rather than $_ to reference the “This Item” in the array and that each Describe block has a context block.&lt;/p>
&lt;p>This should ensure that any new tests that are added to the module follow the guidance we have set up on the Wiki and ensure that the Power Bi results still look beautiful!&lt;/p>
&lt;p>Anyone can run the tests using&lt;/p>
&lt;pre>&lt;code>Invoke-Pester .\\tests\\Unit.Tests.ps1 -show Fails
&lt;/code>&lt;/pre>
&lt;p>before they create a Pull request and it looks like&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/01/02-Pester-results-1.png"
loading="lazy"
>&lt;/p>
&lt;p>if everything is Green then they can submit their Pull Request 🙂 If not they can see quickly that something needs to be fixed. (fail early 🙂 )&lt;/p>
&lt;p>&lt;img src="https://blog.robsewell.com/assets/uploads/2018/01/03-fails.png"
loading="lazy"
alt="03 fails.png"
>&lt;/p></description></item></channel></rss>